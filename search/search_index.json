{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#installation-guides","title":"Installation Guides","text":"<p>Installation Guides @ roboticslab-uc3m</p> <p>Click on the option you want, or use the arrows to move sequentially</p>"},{"location":"index.html#editing-installation-guides","title":"Editing Installation Guides","text":"<p>The content of this documentation is generated from files hosted at: https://github.com/roboticslab-uc3m/installation-guides</p>"},{"location":"index.html#if-you-have-any-doubts-or-comments","title":"If you have any doubts or comments","text":"<p>Please read the Developer Manual's Asking Questions section, and once you've succeded with its self-evaluation follow the recommendations by commenting publicly HERE if required.</p>"},{"location":"install-anaconda.html","title":"Install Anaconda","text":"<p>Anaconda (excerpt from official documentation) is a package manager, an environment manager, a Python distribution, and a collection of over 1,000+ open source packages. To install it just follow the instructions in the original documentation (If you are installing anaconda as a rllab dependecy make sure to download the python 2.7 installer).</p> <p>Anaconda creates its own environments inside the system. This means, that some packages that are installed outside anaconda, have to be installed inside too. To do this you just have to follow the normal installation instructions of the package but inside the anaconda environment.</p> <p>NOTE: Make sure to create another build folder (build_anaconda for example) for the new installation, the rest is the same. Example for rllab3 environment:</p> <p><pre><code>export PATH=\"~/anaconda2/bin:$PATH\" #Activate anaconda\nsource activate rllab3 #Initialize rllab\nexport PYTHONPATH=~/repos/rllab:$PYTHONPATH #Export rllab to pythonpath.\n#install any package following https://github.com/roboticslab-uc3m/installation-guides (make sure to change build-&gt;build_rllab)\n</code></pre> This usually not so easy, some package need additional steps:</p>"},{"location":"install-anaconda.html#install-yarp-python-bindings-inside-anaconda","title":"Install YARP python bindings inside anaconda","text":"<p>Make sure you have performed a normal installation of YARP first. Then:</p> <pre><code>export PATH=\"~/anaconda2/bin:$PATH\" #Activate anaconda\nsource activate rllab3 #Initialize rllab\nexport PYTHONPATH=~/repos/rllab:$PYTHONPATH #Export rllab to pythonpath.\n#Same terminal!\ncd ~/repos/yarp; mkdir build_rllab; cd build_rllab\nmake .. -DCREATE_LIB_MATH=ON -DCREATE_GUIS=OFF -D  #We have problems with qt so GUIS out.\nmake -j$(nproc)  # compile\nsudo make install; sudo ldconfig # install\n#Lets go with the bindings\ncmake .. -DYARP_COMPILE_BINDINGS=ON -DCREATE_PYTHON=ON\nmake -j$(nproc)  # compile\nsudo make install; sudo ldconfig; cd # install and go home\n#Now moving some important things.\ncp /usr/local/lib/python3.5/site-packages/_yarp.so ~/anaconda2/envs/rllab3/lib/python3.5/site-packages\ncp /usr/local/lib/python3.5/site-packages/yarp.py ~/anaconda2/envs/rllab3/lib/python3.5/site-packages\n</code></pre> <p>Now make sure to install again YARP outside anaconda:</p> <pre><code>#open new terminal outside anaconda environment\ncd ~/repos/yarp/build; cmake ..\nsudo make install; cd\n</code></pre>"},{"location":"install-aquila.html","title":"Install Aquila","text":"<p>We use Aquila as a library for Dynamic Time Warping (DTW) operations.</p> <p>Official page: link</p>"},{"location":"install-aquila.html#install-aquila-ubuntu","title":"Install Aquila (Ubuntu)","text":"<pre><code>sudo apt install libsfml-dev\ncd  # go home\nmkdir -p repos; cd repos  # create $HOME/repos if it doesn't exist; then, enter it\ngit clone https://github.com/zsiciarz/aquila.git\ncd aquila; mkdir build; cd build\ncmake ..\nmake -j$(nproc)  # compile\nsudo make install; sudo ldconfig; cd  # install and go home\n</code></pre> <p>Use the following command in case you get relocation errors when linking Aquila from a shared library (#55), then <code>make</code> and install again:</p> <pre><code>cmake .. -DBUILD_SHARED_LIBS=ON\n</code></pre>"},{"location":"install-aravis.html","title":"Install Aravis 0.4","text":"<ol> <li>Download the current stable release  here (backup here).</li> <li>Install the following dependencies: <pre><code>sudo apt install glib-2.0 gobject-2.0 gio-2.0 libxml-2.0 thread-2.0 zlib gstreamer-base-1.0 streamer-app-1.0 gstreamer-base-0.10 gstreamer-app-0.10 gstreamer-video-1.0 gtk+-3.0 libnotify\n</code></pre></li> <li>Install even more dependencies: <pre><code>sudo apt install autoconf intltool python-gobject-dev gobject-introspection gtk-doc-tools libgstreamer0.10-dev python-gst0.10-dev libxml2-dev\n</code></pre></li> <li>Uncompress the downloaded Aravis package and open a terminal in that folder.</li> <li>Run <code>./configure</code></li> <li>Run <code>make</code></li> <li>Run <code>sudo make install</code></li> <li>Run <code>sudo ldconfig</code></li> <li>(for USB cameras only) Copy the udev rules into <code>/etc/udev/rules.d/aravis.rules</code> (source):    <pre><code># FLIR Integrated Imaging Solutions\nSUBSYSTEM==\"usb\", ATTRS {idVendor}==\"1e10\", MODE:=\"0666\", TAG+=\"uaccess\", TAG+=\"udev-acl\"\n</code></pre></li> </ol>"},{"location":"install-aravis.html#if-you-need-some-special-features","title":"If you need some special features...","text":"<p>Depending on what you need, you have to call autogen with different parameters.</p> <p>The most common are:</p>"},{"location":"install-aravis.html#-enable-viewer","title":"--enable-viewer","text":"<p>Builds the aravis example application that allows basic interaction with your camera. The viewer needs GTK+3 and libnotify. You can install them with</p> <pre><code>sudo apt install libgtk-3-dev libnotify-dev libgstreamer1.0 libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-bad\n</code></pre>"},{"location":"install-aravis.html#-enable-gst-plugin","title":"--enable-gst-plugin","text":"<p>Build the aravis gstreamer plugin.</p>"},{"location":"install-aravis.html#-enable-gst-plugin-010","title":"--enable-gst-plugin-0.10","text":"<p>Build the aravis gstreamer-0.10 plugin.</p>"},{"location":"install-aravis.html#-enable-gtk-doc","title":"--enable-gtk-doc","text":"<p>Build the aravis documentation.</p>"},{"location":"install-aravis.html#-enable-introspectionyes","title":"--enable-introspection=yes","text":"<p>Allow interaction with aravis trough gobject introspection. This allows usage of aravis in non-c based languages like Python or Perl.</p> <p>On Ubuntu / Debian it is <code>sudo apt install libgirepository1.0-dev</code></p>"},{"location":"install-aravis.html#-disable-silent-rules","title":"--disable-silent-rules","text":"<p>If you want to see the actual compile commands</p> <p>For an overview over all available arguments try configure --help</p> <p>In case the library is built with <code>./autogen.sh --enable-viewer --enable-introspection=yes</code> some more packages are needed: <code>sudo apt install libgirepository1.0-dev libnotify-dev lib-gtk-3-dev</code></p>"},{"location":"install-aravis.html#original-source","title":"Original Source","text":"<p>Should you have any trouble with the installation process, you can read the original source of this guide here.</p>"},{"location":"install-arduino.html","title":"Install Arduino","text":""},{"location":"install-arduino.html#install-arduino-ubuntu-2204-jammy","title":"Install Arduino (Ubuntu 22.04 Jammy)","text":"<pre><code>sudo apt install arduino\n</code></pre>"},{"location":"install-arduino.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"install-arduino.html#arduino-does-not-open-ubuntu-2204-jammy","title":"Arduino does not open (Ubuntu 22.04 Jammy)","text":"<p>Issue https://bugs.launchpad.net/ubuntu/+source/arduino/+bug/1916278 (Ubuntu 22.04.1 Jammy):</p> <pre><code>Picked up JAVA_TOOL_OPTIONS: \njava.lang.UnsatisfiedLinkError: /usr/lib/x86_64-linux-gnu/liblistSerialsj.so.1.4.0: /usr/lib/x86_64-linux-gnu/liblistSerialsj.so.1.4.0: undefined symbol: sp_get_port_usb_vid_pid\n    at java.base/java.lang.ClassLoader$NativeLibrary.load0(Native Method)\n    at java.base/java.lang.ClassLoader$NativeLibrary.load(ClassLoader.java:2445)\n    at java.base/java.lang.ClassLoader$NativeLibrary.loadLibrary(ClassLoader.java:2501)\n    at java.base/java.lang.ClassLoader.loadLibrary0(ClassLoader.java:2700)\n    at java.base/java.lang.ClassLoader.loadLibrary(ClassLoader.java:2662)\n    at java.base/java.lang.Runtime.loadLibrary0(Runtime.java:830)\n    at java.base/java.lang.System.loadLibrary(System.java:1873)\n    at processing.app.Platform.&lt;clinit&gt;(Platform.java:143)\n    at java.base/java.lang.Class.forName0(Native Method)\n    at java.base/java.lang.Class.forName(Class.java:315)\n    at processing.app.BaseNoGui.initPlatform(BaseNoGui.java:514)\n    at processing.app.Base.&lt;init&gt;(Base.java:201)\n    at processing.app.Base.main(Base.java:141)\n</code></pre> <p>Solution (via https://bugs.launchpad.net/ubuntu/+source/arduino/+bug/1916278/comments/11 by <code>U\u011fur \u00c7etin</code>)</p> <pre><code>sudo apt install libserialport0 patchelf\nsudo patchelf --add-needed /usr/lib/x86_64-linux-gnu/libserialport.so.0 /usr/lib/x86_64-linux-gnu/liblistSerialsj.so.1.4.0\n</code></pre>"},{"location":"install-arduino.html#no-ports-in-tools-ports-ubuntu-2204-jammy","title":"No ports in Tools: Ports (Ubuntu 22.04 Jammy)","text":"<p>Inspecting in <code>dmesg</code>/<code>tail -f /var/log/syslog</code>, lots of <code>brltty</code>. Solution (via <code>flaviut</code> at https://unix.stackexchange.com/questions/670636/unable-to-use-usb-dongle-based-on-usb-serial-converter-chip/670637#670637):</p> <pre><code>for f in /usr/lib/udev/rules.d/*brltty*.rules; do\n    sudo ln -s /dev/null \"/etc/udev/rules.d/$(basename \"$f\")\"\ndone\nsudo udevadm control --reload-rules\nsudo systemctl mask brltty.path\n</code></pre> <p>And reboot!</p>"},{"location":"install-arduino.html#avrdude-stk500_recv-programmer-is-not-responding-arduino-nano","title":"avrdude: stk500_recv(): programmer is not responding (Arduino Nano)","text":"<p>Try each (thanks <code>david_2018</code> at https://forum.arduino.cc/t/solved-can-not-upload-to-nano-after-ubuntu-update-feb-04-2022/955456/3):</p> <ul> <li>Tools &gt; Processor: \"ATmega328P\"</li> <li>Tools&gt; Processor: \"ATmega328P (Old Bootloader)\"</li> </ul>"},{"location":"install-arduino.html#tutorials-and-examples","title":"Tutorials and Examples","text":"<ul> <li>https://programarfacil.com/blog/arduino-blog/curso-de-arduino/</li> </ul>"},{"location":"install-bazel.html","title":"Install Bazel","text":"<p>We use Bazel to build TensorFlow.</p> <p>Official page: link.</p>"},{"location":"install-bazel.html#install-bazel-ubuntu","title":"Install Bazel (Ubuntu)","text":"<p>The easiest is to download the Bazel binary installer named <code>bazel-&lt;version&gt;-installer-linux-x86_64.deb</code> from the Bazel releases page on GitHub.</p> <p>Here's an example for v0.21.0 <pre><code>sudo apt install zlib1g-dev\nwget https://github.com/bazelbuild/bazel/releases/download/0.21.0/bazel_0.21.0-linux-x86_64.deb\nsudo dpkg -i bazel_0.21.0-linux-x86_64.deb\n</code></pre></p>"},{"location":"install-boost.html","title":"Install Boost","text":"<p>This package contains the Boost C++ Libraries development files.</p>"},{"location":"install-boost.html#install-boost-ubuntu","title":"Install Boost (Ubuntu)","text":"<p>Usually, you'll want to install all available Boost libraries. Note that you will be prompted for your password upon using <code>sudo</code>.</p> <pre><code>sudo apt install libboost-all-dev\n</code></pre> <p>In case you just want specific components of the Boost framework, check available packages (<code>libboost-&lt;component&gt;-dev</code>) first. For Boost.Thread:</p> <pre><code>sudo apt install libboost-thread-dev\n</code></pre> <p>Header-only Boost libraries are grouped in one single package, which is a common dependency for <code>libboost-all-dev</code> and <code>libboost-&lt;component&gt;-dev</code>:</p> <pre><code>sudo apt install libboost-dev\n</code></pre>"},{"location":"install-boost.html#install-boost-windows","title":"Install Boost (Windows)","text":"<ul> <li>Download the source code from http://www.boost.org/users/download/.</li> <li>Extract in a <code>Boost</code> folder located at <code>C:\\</code> or <code>C:\\Program files</code> so that CMake find-modules can detect it.</li> <li>Invoke the command line and navigate to the extracted folder (e.g. <code>cd C:\\Boost\\boost_1_63_0</code>).</li> <li>Follow the instructions at http://www.boost.org/build/doc/html/bbv2/overview/invocation.html to build all packages in the selected configuration. You may want to compile only specific modules, in which case refer to their documentation (http://www.boost.org/doc/libs/).<ul> <li>Run the bootstrap script (<code>bootstrap.bat</code>) prior to building anything.</li> <li>Issuing <code>b2</code> will build only static libraries for the default architecture and both Release and Debug configurations.</li> <li>Issue <code>b2 variant=release address-model=64 link=static,shared</code> to build 64-bit static and dynamic binaries in Release configuration for all available Boost components.</li> <li>Issue <code>b2 property=value --with-&lt;component&gt;</code> to build only specific Boost components (list). Use lower case. Example: <code>b2 variant=release --with-thread</code> will build release binaries for Boost.Thread. You can chain multiple <code>--with-&lt;component&gt;</code> options.</li> <li>See #Properties for further details on the command line interface.</li> </ul> </li> </ul>"},{"location":"install-build-essential.html","title":"Install build-essential","text":"<p>This package is needed for working with Debian packages.</p> <p>Installing build-essentials on Ubuntu is quite straightforward. Note that you will be prompted for your password upon using sudo. Type:</p> <pre><code>sudo apt install build-essential\n</code></pre>"},{"location":"install-cmake.html","title":"Install CMake","text":"<p>We use CMake for project generating.</p> <p>Official download page: https://cmake.org/download/.</p> <p>Legacy documentation regarding CMake installations can be found at: (Legacy) Install CMake</p>"},{"location":"install-cmake.html#install-cmake-316-ubuntu-2004-focal","title":"Install CMake 3.16+ (Ubuntu 20.04 Focal)","text":"<p>Install CMake 3.16.3 via the conventional Canonical PPA:</p> <pre><code>sudo apt install cmake\nsudo apt install cmake-curses-gui  # Recommended, includes ccmake.\n</code></pre>"},{"location":"install-cmake.html#install-cmake-319-ubuntu-1804-bionic","title":"Install CMake 3.19+ (Ubuntu 18.04 Bionic)","text":"<p>The latest CMake release per distro (cmake 3.19.1 as of 2020/11/26) is available via Kitware's PPA:</p> <pre><code>wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2&gt;/dev/null | sudo apt-key add -\n</code></pre> <pre><code>sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'\nsudo apt-get update\n</code></pre> <p>Then, download and install CMake:</p> <pre><code>sudo apt install cmake\nsudo apt install cmake-curses-gui  # Recommended, includes ccmake.\n</code></pre>"},{"location":"install-cmake.html#other-providers-install-cmake-310-ubuntu-1804-bionic","title":"Other providers: Install CMake 3.10+ (Ubuntu 18.04 Bionic)","text":"<p>CMake has been traditionally available via the Canonical PPA. Note, however, that these packages may contain versions that are older (cmake 3.10.2 as of 2020/11/18) than those published in the Kitware PPA and thus break builds with recent software. Skip adding other repositories and simply:</p> <pre><code>sudo apt install cmake\nsudo apt install cmake-curses-gui  # Recommended, includes ccmake.\n</code></pre> <p>In addition, a pip wheels release exists: ref.</p>"},{"location":"install-coppeliasim.html","title":"Install CoppeliaSim (formerly, V-REP)","text":"<p>Official page: https://www.coppeliarobotics.com</p>"},{"location":"install-coppeliasim.html#install-coppeliasim-all-platforms","title":"Install CoppeliaSim (all platforms)","text":"<p>Simply go to https://www.coppeliarobotics.com/#download and download your version. We recommend the <code>edu</code> version.</p>"},{"location":"install-coppeliasim.html#additional-information","title":"Additional Information","text":""},{"location":"install-coppeliasim.html#similar-and-related","title":"Similar and Related","text":"<ul> <li>https://github.com/roboticslab-uc3m?q=coppeliasim (roboticslab-uc3m)</li> <li>stepjam/PyRep</li> </ul>"},{"location":"install-cwiid.html","title":"Install CWiiD","text":"<p>In the past, we used CWiiD for interfacing with the Wiimote (Wii controller).</p> <p>Official page: link.</p> <p>This library is no longer maintained. See Install XWiimote for a replacement.</p>"},{"location":"install-cwiid.html#install-cwiid-ubuntu","title":"Install CWiiD (Ubuntu)","text":"<pre><code>sudo apt install libcwiid-dev\n</code></pre>"},{"location":"install-daemontools.html","title":"Install daemontools","text":""},{"location":"install-daemontools.html#install-daemontools-ubuntu","title":"Install daemontools (Ubuntu)","text":"<pre><code>sudo apt install daemontools daemontools-run csh\n</code></pre> <p><code>daemontools</code> can be activated in <code>/etc/rc.local</code> through the line (before exit):</p> <pre><code>/bin/csh -cf '/usr/bin/svscanboot &amp;'\n</code></pre>"},{"location":"install-daemontools.html#create-a-service","title":"Create a service","text":"<ol> <li>Create a folder inside <code>/etc/service</code>, e.g. <code>/etc/service/whatever</code></li> <li>Inside it, create a script called <code>run</code>, e.g. <code>/etc/service/whatever/run</code></li> <li>Give it execution permissions, e.g. <code>chmod +x /etc/service/whatever/run</code></li> </ol> <p>Here's an example <code>/etc/service/yarprun/run</code> example we'll use for the rest of the examples: <pre><code>#!/bin/bash\nexport PATH=/usr/local/bin:/usr/bin:/bin\nexport YARP_CONFIG_HOME=/home/teo/.config/yarp\nyarprun --server /manipulation\n</code></pre></p>"},{"location":"install-daemontools.html#monitoring","title":"Monitoring","text":"<p>Get the status of, say, a <code>/etc/service/yarprun/run</code> service with:</p> <pre><code>sudo svstat /etc/service/yarprun # We do not point to run here\n</code></pre>"},{"location":"install-daemontools.html#troubleshooting","title":"Troubleshooting","text":"<p>You can get some log messages for debugging opening a separate terminal with: <pre><code>ps aux | grep readproctitle\n</code></pre></p> <p>Then stop the service with: <pre><code>sudo svc -d /etc/service/yarprun # We do not point to run here\n</code></pre></p> <p>And start the service with: <pre><code>sudo svc -u /etc/service/yarprun # We do not point to run here\n</code></pre></p>"},{"location":"install-daemontools.html#additional-resources","title":"Additional Resources","text":"<ul> <li>http://blog.teksol.info/pages/daemontools/tutorial</li> </ul>"},{"location":"install-docker.html","title":"Install Docker","text":"<p>We use Docker for images and containers.</p>"},{"location":"install-docker.html#install-docker-all-platforms","title":"Install Docker (all platforms)","text":"<p>Simply go to Docker and download your version.</p>"},{"location":"install-docker.html#additional-information","title":"Additional Information","text":""},{"location":"install-docker.html#similar-and-related","title":"Similar and related","text":""},{"location":"install-docker.html#docker-compose","title":"Docker Compose","text":"<p>Compose V2 is included with all currently supported versions of Docker Desktop.</p>"},{"location":"install-docker.html#rocker","title":"Rocker","text":"<ul> <li>osrf/rocker: A tool to run docker containers with overlays and convenient options for things like GUIs etc.</li> </ul>"},{"location":"install-docker.html#tutorials-and-examples","title":"Tutorials and Examples","text":"<ul> <li>https://asrob.uc3m.es/tutoriales/software/docker.html</li> </ul>"},{"location":"install-ecf.html","title":"Install ECF","text":"<p>We use Evolutionary Computation Framework (ECF) for evolutionary computation applications.</p> <p>Official page: link. </p>"},{"location":"install-ecf.html#install-ecf-ubuntu","title":"Install ECF (Ubuntu)","text":"<pre><code>wget http://ecf.zemris.fer.hr/ecf_install.sh\nsh ./ecf_install.sh\n</code></pre>"},{"location":"install-eigen.html","title":"Install Eigen","text":"<p>This package contains the Eigen C++ template library and development files.</p>"},{"location":"install-eigen.html#install-eigen3-ubuntu","title":"Install Eigen3 (Ubuntu)","text":"<p>Installing Eigen3 on Ubuntu is quite straightforward. Note that you will be prompted for your password upon using <code>sudo</code>. Type:</p> <pre><code>sudo apt install libeigen3-dev\n</code></pre>"},{"location":"install-eigen.html#install-eigen3-windows","title":"Install Eigen3 (Windows)","text":"<ul> <li>Download the desired release from http://eigen.tuxfamily.org.</li> <li>Unzip in the location of your choice, preferrably at <code>C:\\</code> or <code>C:\\Program files</code> for better discoverability by CMake find-modules (remember to extract the inner folder and rename it to <code>Eigen3</code> or <code>Eigen</code>).</li> </ul>"},{"location":"install-espeak-mbrola.html","title":"Install eSpeak with MBROLA Voices","text":"<p>We use ESPEAK with MBROLA Voices for speech synthesis (TTS).</p> <ul> <li>Official download page of eSpeak: link</li> <li>Official download page of MBROLA: link</li> </ul>"},{"location":"install-espeak-mbrola.html#install-espeak-and-mbrola-voices-ubuntu","title":"Install eSpeak and MBROLA Voices (Ubuntu)","text":"<pre><code>sudo apt install espeak libespeak-dev\nsudo apt install mbrola-en1\nsudo apt install mbrola-us2\nsudo apt install mbrola-es1\n</code></pre>"},{"location":"install-gazebo.html","title":"Install Gazebo","text":"<p>Note: For now, this page refers to what is now known as <code>Gazebo Classic</code>:</p> <ul> <li>Official page: https://classic.gazebosim.org</li> <li>For new <code>GazeboSim</code>, refer to: https://gazebosim.org</li> </ul>"},{"location":"install-gazebo.html#install-gazebo-ubuntu-2204-jammy","title":"Install Gazebo (Ubuntu 22.04 Jammy)","text":"<p>Install Gazebo 11 (Classic) via:</p> <pre><code>sudo apt install gazebo\n</code></pre> <p>You may also be interested in:</p> <pre><code>sudo apt install libgazebo-dev\n</code></pre>"},{"location":"install-gazebo.html#install-gazebo-ubuntu-2004-focal","title":"Install Gazebo (Ubuntu 20.04 Focal)","text":"<p>Note that Gazebo 9 (Classic) is also avaliable for this distro.</p> <p>Install Gazebo 11 (Classic) via:</p> <pre><code>sudo apt install gazebo11\n</code></pre> <p>You may also be interested in:</p> <pre><code>sudo apt install libgazebo11-dev\n</code></pre>"},{"location":"install-gazebo.html#install-gazebo-ubuntu-1804-bionic","title":"Install Gazebo (Ubuntu 18.04 Bionic)","text":"<p>Install Gazebo 9 (Classic) via:</p> <pre><code>sudo apt install gazebo9\n</code></pre> <p>You may also be interested in:</p> <pre><code>sudo apt install libgazebo9-dev\n</code></pre>"},{"location":"install-gazebo.html#install-gazebo-ubuntu-1604-xenial","title":"Install Gazebo (Ubuntu 16.04 Xenial)","text":"<p>Install Gazebo 7 (Classic) via:</p> <pre><code>sudo apt install gazebo7\n</code></pre> <p>You may also be interested in:</p> <pre><code>sudo apt install libgazebo7-dev\n</code></pre>"},{"location":"install-gazebo.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"install-gazebo.html#bad-screen-output-wslwsl2-with-ubuntu-2204-jammy","title":"Bad screen output (WSL/WSL2 with Ubuntu 22.04 Jammy)","text":"<ul> <li>Description: Bad screen output using WSL/WSL2 with Ubuntu 22.04 Jammy, deformed gray image (good image flashes when attempting 3D navigation).</li> <li> <p>Solution: As described at Taskbar window caption shows [WARN: COPY MODE] #312, fixed via upgrading to mesa 21.x:</p> <pre><code>sudo add-apt-repository ppa:kisak/kisak-mesa\nsudo apt-get update\nsudo apt upgrade\n</code></pre> <p>Then close Ubuntu, run <code>wsl --shutdown</code> from Windows, and finally restart Ubuntu.</p> </li> </ul>"},{"location":"install-gazebo.html#additional-information","title":"Additional Information","text":""},{"location":"install-gazebo.html#similar-and-related","title":"Similar and Related","text":"<ul> <li>https://github.com/roboticslab-uc3m?q=gazebo (roboticslab-uc3m)</li> </ul>"},{"location":"install-git.html","title":"Install Git","text":""},{"location":"install-git.html#install-git-ubuntu","title":"Install Git (Ubuntu)","text":"<pre><code>sudo apt install git\n</code></pre>"},{"location":"install-git.html#additional-information","title":"Additional Information","text":""},{"location":"install-git.html#tutorials-and-examples","title":"Tutorials and Examples","text":"<ul> <li>https://asrob.uc3m.es/tutoriales/software/version-control/git.html</li> </ul>"},{"location":"install-gitbook.html","title":"Install GitBook","text":"<p>Page related to open source GitBook (sometimes aka Legacy), not new closed source version.</p> <p>Official page: https://github.com/GitbookIO/gitbook</p>"},{"location":"install-gitbook.html#install-gitbook-ubuntu","title":"Install GitBook (Ubuntu)","text":"<p>First:</p> <ul> <li>Install NPM</li> <li>Install Node.js<ul> <li>Note that <code>gitbook 3.2.3</code> works with <code>node 10.19.0</code> and <code>node 10.24.0</code>, but not with <code>node 14.x</code>.</li> </ul> </li> </ul> <p>Then:</p> <pre><code>sudo npm install -g gitbook-cli\n</code></pre>"},{"location":"install-gitbook.html#to-be-able-to-serve-via-gitbook","title":"To be able to serve via GitBook","text":"<p>Make sure your project has a file called <code>SUMMARY.md</code> in its root.</p>"},{"location":"install-gitbook.html#how-tos","title":"How-To's","text":""},{"location":"install-gitbook.html#how-to-install-gitbook-plugins-if-present-in-project","title":"How to install GitBook plugins (if present in project)","text":"<p>Only necesary once per project (and only if any, specified in <code>book.json</code>). They are installed in <code>./node_modules/</code>, which should usually be set as ignored (not uploaded to repository).</p> <pre><code>gitbook install\n</code></pre>"},{"location":"install-gitbook.html#how-to-serve-defaults-to-localhost4000","title":"How to serve (defaults to <code>localhost:4000</code>)","text":"<pre><code>gitbook serve # command builds and serves\n</code></pre>"},{"location":"install-gitbook.html#how-to-build-generate-_book-without-serving","title":"How to build (generate <code>_book</code> without serving)","text":"<pre><code>gitbook build\n</code></pre>"},{"location":"install-gitbook.html#additional-tools","title":"Additional Tools","text":""},{"location":"install-gitbook.html#gitbook-summary","title":"gitbook-summary","text":"<p>A useful tool for auto-generating <code>SUMMARY.md</code> as done for roboticslab-uc3m/installation-guides. Install via:</p> <pre><code>sudo npm install -g gitbook-summary\n</code></pre>"},{"location":"install-glib.html","title":"Install GLib","text":"<p>Official reference manual and downloads: link.</p>"},{"location":"install-glib.html#install-glib-ubuntu","title":"Install GLib (Ubuntu)","text":"<pre><code>sudo apt install libglib2.0-dev\n</code></pre>"},{"location":"install-googletest.html","title":"Install googletest","text":"<p>We use googletest for performing automated unit testing (usually via Travis CI). In order to avoid compilation issues, it is recommended to work with source files, i.e. not precompiled binaries, and build the final googletest libraries along with the user's project.</p>"},{"location":"install-googletest.html#install-googletest-ubuntu-1704-and-later","title":"Install googletest (Ubuntu 17.04 and later)","text":"<pre><code>sudo apt install googletest\n</code></pre>"},{"location":"install-googletest.html#install-googletest-ubuntu-1404-and-1604","title":"Install googletest (Ubuntu 14.04 and 16.04)","text":"<pre><code>sudo apt install libgtest-dev\n</code></pre>"},{"location":"install-gstreamer-pocketsphinx.html","title":"Install GStreamer with pocketsphinx","text":"<p>We use <code>gstreamer</code> with <code>pocketsphinx</code> within speech recognition.</p>"},{"location":"install-gstreamer-pocketsphinx.html#install-gstreamer-with-pocketsphinx-ubuntu-2004-focal","title":"Install gstreamer with pocketsphinx (Ubuntu 20.04 Focal)","text":"<pre><code>sudo apt install pocketsphinx libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-pocketsphinx\n</code></pre> <p>Next, you can verify the detection of Spanish sentences on the dictionary and models hosted in our speech repository.</p> <pre><code>cd ~/repos/speech/share/speechRecognition\npocketsphinx_continuous -inmic yes -lm dictionary/20k-es.lm -dict dictionary/20k-es.dic -hmm model/es/\n</code></pre> <p>Check out the following sections if something goes wrong.</p>"},{"location":"install-gstreamer-pocketsphinx.html#install-gstreamer","title":"Install gstreamer","text":"<pre><code>sudo apt install libgstreamer1.0-dev\nsudo apt install libgstreamer-plugins-base1.0-dev\n</code></pre>"},{"location":"install-gstreamer-pocketsphinx.html#install-pocketsphinx-dependencies","title":"Install pocketsphinx dependencies","text":"<p>To compile <code>pocketsphinx</code> from source, <code>sphinxbase</code> is a dependency.</p> <ul> <li>Install sphinxbase</li> </ul>"},{"location":"install-gstreamer-pocketsphinx.html#install-pocketsphinx","title":"Install pocketsphinx","text":"<pre><code>sudo apt install autoconf libtool\ncd  # go home\nmkdir -p repos; cd repos  # create $HOME/repos if it doesn't exist; then, enter it\ngit clone https://github.com/cmusphinx/pocketsphinx\ncd pocketsphinx\n./autogen.sh\n./configure\nmake -j$(nproc)  # compile\nsudo make install # install\n</code></pre>"},{"location":"install-gstreamer-pocketsphinx.html#configure-gstreamer-with-pocketsphinx","title":"Configure gstreamer with pocketsphinx","text":"<p>We need to configure the path to look for shared libaries:</p> <pre><code>echo \"export GST_PLUGIN_PATH=$GST_PLUGIN_PATH:/usr/local/lib/gstreamer-1.0\" &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"install-gstreamer-pocketsphinx.html#verify-gstreamer-with-pocketsphinx","title":"Verify gstreamer with pocketsphinx","text":"<p>To verify that GStreamer can find the plugin. You should get a large amount of output, ending with something like this:</p> <pre><code>gst-inspect-1.0 pocketsphinx\n\ndecoder             : The underlying decoder\n                       flags: readable\n                       Boxed pointer of type \"PSDecoder\"\n</code></pre> <p>To test that all is running ok:</p> <pre><code>pocketsphinx_continuous -inmic yes\n</code></pre>"},{"location":"install-gstreamer-pocketsphinx.html#troubleshooting-gstreamer-with-pocketsphinx","title":"Troubleshooting GStreamer with pocketsphinx","text":"<p>Most importantly, follow steps in correct order: first gstreamer, then pocketsphinx, and finally configure. If you install <code>pocketsphinx</code> without <code>gstreamer</code>, you'll end up having to install <code>gstreamer</code> first, then re-<code>.configure</code> <code>pocketsphinx</code>, compile and install again.</p> <p>Some tutorials also recommend: <pre><code>echo \"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib\" &gt;&gt; ~/.bashrc\necho \"export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig\" &gt;&gt; ~/.bashrc\n</code></pre></p> <p>As well as: <pre><code>sudo modprobe snd_pcm_oss # Depends on your sound system\n</code></pre></p>"},{"location":"install-gstreamer-pocketsphinx.html#references","title":"References","text":"<ul> <li>https://cmusphinx.github.io/wiki/gstreamer/</li> </ul>"},{"location":"install-gymnasium.html","title":"Install Gymnasium","text":"<p>Official page: link / Farama-Foundation/Gymnasium</p>"},{"location":"install-gymnasium.html#install-gymnasium-via-pip","title":"Install Gymnasium (via pip)","text":"<p>This requires pip. (Use <code>pip3</code> to install the Python 3 version):</p> <pre><code>pip install gymnasium\n</code></pre>"},{"location":"install-gymnasium.html#additional-information","title":"Additional Information","text":""},{"location":"install-gymnasium.html#similar-and-related","title":"Similar and Related","text":"<ul> <li>https://github.com/roboticslab-uc3m?q=gymnasium (roboticslab-uc3m)</li> <li>https://github.com/jgvictores/awesome-deep-reinforcement-learning#rldrl-environments</li> </ul>"},{"location":"install-hcanpci.html","title":"Install hcanpci kernel module","text":""},{"location":"install-hcanpci.html#install-hcanpci-kernel-module-debian-60","title":"Install hcanpci kernel module (Debian 6.0)","text":"<pre><code>cd  # go home\nmkdir -p src &amp;&amp; cd src  # make $HOME/src if it doesn't exist; then, enter it\nwget https://sourceforge.net/projects/roboticslab/files/External/hcanpci/linux-2-6-32/100_hcanpci_linux-v1207en-edi1822.tar.gz\ntar -xzf 100_hcanpci_linux-v1207en-edi1822.tar.gz\ncd hcanpci_linux-v1207en/driver\nmake\nsudo mkdir /lib/modules/2.6.32-5-686/kernel/can\nsudo cp hcanpci.ko /lib/modules/2.6.32-5-686/kernel/can\nsudo depmod\nsudo ln -s $PWD/driver/makenodes.sh /usr/local/bin\n</code></pre>"},{"location":"install-hcanpci.html#install-hcanpci-kernel-module-ubuntu-1404","title":"Install hcanpci kernel module (Ubuntu 14.04)","text":"<pre><code>cd  # go home\ncd repos\ngit clone https://github.com/roboticslab-uc3m/hc-driver-4.9\ncd hc-driver-4.9/miniPCI2to4CH/driver\nmake\nsudo mkdir /lib/modules/4.4.0-31-generic/kernel/can\nsudo cp hcanpci.ko /lib/modules/4.4.0-31-generic/kernel/can\nsudo depmod\ncd\nsudo ln -s $PWD/repos/hc-driver-4.9/miniPCI2to4CH/driver/makenodes.sh /usr/local/bin\nsudo ldconfig\n</code></pre> <p>Now add the following line to <code>/etc/rc.local</code> (lines before the exit):</p> <pre><code>/usr/local/bin/makenodes.sh\n</code></pre>"},{"location":"install-icub.html","title":"Install icub-main","text":"<p>We use the icub-main repository for the <code>xsensmtx</code> device.</p> <p>Make sure you have previously installed YARP with lib_math.</p> <pre><code>cd  # go home\nmkdir -p repos; cd repos  # create $HOME/repos if it doesn't exist; then, enter it\ngit clone https://github.com/robotology/icub-main\ncd icub-main; mkdir build; cd build\ncmake .. -DENABLE_icubmod_xsensmtx=ON\nmake -j$(nproc)  # compile\nsudo make install; sudo ldconfig; cd  # install and go home\n</code></pre> <p>Try <code>xsensmtx</code> out: <pre><code>[Terminal 1] yarp server\n[Terminal 2] sudo chmod 777 /dev/ttyUSB0\n[Terminal 2] sudo yarpdev --device deviceBundler --wrapper_device multipleanalogsensorsserver --attached_device xsensmtx --name /inertial --period 5\n[Terminal 3] yarp read ... /inertial\n</code></pre></p>"},{"location":"install-jekyll.html","title":"Install Jekyll","text":"<p>We use Jekyll to generate static web sites (and GitHub Pages uses it too!).</p> <p>Official page: link.</p>"},{"location":"install-jekyll.html#install-jekyll-ubuntu","title":"Install Jekyll (Ubuntu)","text":"<p>Bundler requires Ruby version &gt;= 2.3.0, which is the default for Ubuntu 18.04 Bionic and Ubuntu 20.04 Focal</p> <pre><code>sudo apt install ruby-dev\nsudo gem install bundler jekyll\n</code></pre>"},{"location":"install-jekyll.html#to-be-able-to-serve-via-jekyll","title":"To be able to serve via Jekyll","text":"<p>Make sure your project has a file called <code>Gemfile</code> in its root with the following contents: <pre><code>source 'https://rubygems.org'\ngem 'github-pages', group: :jekyll_plugins\n</code></pre></p> <p>It is also common practice to have a file called <code>.gitignore</code> in the project root with (at least) the following contents: <pre><code># Jekyll generated\n/_site/\n/Gemfile.lock\n</code></pre></p>"},{"location":"install-jekyll.html#serve-via-jekyll","title":"Serve via Jekyll","text":"<pre><code>bundle exec jekyll serve\n</code></pre> <p>Now browse to http://localhost:4000</p>"},{"location":"install-jekyll.html#troubleshooting-jekyll","title":"Troubleshooting Jekyll","text":"<p>To install missing components: <pre><code>bundle install\n</code></pre></p>"},{"location":"install-jr3.html","title":"Install JR3","text":"<p>Download and compile JR3 kernel driver: <pre><code>cd  # go home\nmkdir -p repos; cd repos  # create $HOME/repos if it doesn't exist; then, enter it\ngit clone https://github.com/roboticslab-uc3m/jr3pci-linux\ncd jr3pci-linux\nmake\n</code></pre></p> <p>In order to install and load the driver in kernel, at this point you may go away with a simple <code>sudo make install</code>. This will also install the IOCTL header for use by dependent project (such as our YARP device). To achieve the latter in an isolated manner, use <code>sudo make install-header</code>.</p> <p>The traditional way we used to do this instead is detailed below (beware: the header will need to be installed manually):</p> <pre><code>cd /lib/modules/$(uname -r)/kernel/drivers\nsudo mkdir -p jr3\nsudo cp $HOME/repos/jr3pci-linux/jr3pci-driver.ko jr3/\nsudo depmod\n</code></pre> <p>In case the compiled driver is not regitered and loaded automatically, add the following lines to <code>/etc/rc.local</code> (lines before the exit) to load the jr3 kernel module on startup (may require <code>sudo</code> if run manually):</p> <p><pre><code>modprobe jr3pci-driver  # Replaces: insmod jr3pci-driver.ko\nmknod /dev/jr3 c 39 0  # Equivalent to (in code dir): make node\nchmod 777 /dev/jr3\n</code></pre> Note: the <code>/etc/rc.local</code> file on Ubuntu and Debian systems are used to execute commands at system startup. But there's no such file in Ubuntu 18.04. So, we need to create it adding this lines:</p> <p><pre><code>#!/bin/bash\nmodprobe jr3pci-driver\nmknod /dev/jr3 c 39 0\nchmod 777 /dev/jr3\nexit 0\n</code></pre> Now make it executable with:</p> <pre><code>chmod +x /etc/rc.local\n</code></pre>"},{"location":"install-jr3.html#view-jr3-data","title":"View JR3 data","text":"<p>There is a handy ncurses utility included in the driver repository. Make sure you have installed the Ncurses library and then compile the application:</p> <pre><code>sudo apt install libncurses-dev\ncd repos/jr3pci-linux\nmake jr3mon\n</code></pre> <p>If you want to go the YARP way, then you can use our acquisition device:</p> <ol> <li>Install https://github.com/roboticslab-uc3m/yarp-devices</li> <li>Go to manipulation PC:    <pre><code>yarpdev --device Jr3 --period 20 --name /jr3  --ports \"(ch0:o ch1:o ch2:o ch3:o)\" --channels 24 --ch0:o 0 5 0 5 --ch1:o 6 11 0 5 --ch2:o 12 17 0 5 --ch3:o 18 23 0 5\n</code></pre></li> <li>Data can be vizualized via classic <code>yarp read ... /jr3/ch0:o</code> or like in teoTools.xml.</li> </ol>"},{"location":"install-jr3.html#troubleshooting-jr3","title":"Troubleshooting JR3","text":"<p>Green LEDs should be ON after <code>jr3pci_driver</code> module is loaded (see <code>lsmod | grep jr3</code>). Check <code>/etc/rc.local</code> to see if this is the default upon switching on the PC. Possible fixes if not working:</p> <ol> <li> <p>Type <code>lspci</code> to see PCI devices connected to the computer. The PCI card Adapter <code>PCI bridge: Pericom Semiconductor PI7C9X110 PCI Express to PCI bridge</code> should be there.</p> </li> <li> <p>Shutdown and review connections!! (review: PCI adapter connections, power and PCI slots).</p> </li> <li> <p>If it is due to a kernel upgrade, sometimes cleaning and installing again works:    <pre><code>cd $HOME/repos/jr3pci-linux\nsudo make clean\nmake\ncd /lib/modules/$(uname -r)/kernel/drivers\nsudo mkdir -p jr3\nsudo cp $HOME/repos/jr3pci-linux/jr3pci-driver.ko jr3/\nsudo depmod\n</code></pre></p> </li> </ol>"},{"location":"install-jr3.html#unclassified","title":"Unclassified","text":"<p>The following repo contains a driver described as suitable for jr3 for Xenomai using RTDM: https://github.com/wdomski/jr3</p>"},{"location":"install-kdl.html","title":"Install KDL","text":"<p>We use Orocos KDL for robot kinematics. Official download page: https://www.orocos.org/kdl</p> <p>Make sure you have previously installed Eigen3.</p> <p>Installing KDL on Ubuntu is quite straightforward. Note that you will be prompted for your password upon using <code>sudo</code> a couple of times:</p>"},{"location":"install-kdl.html#install-kdl-ubuntu","title":"Install KDL (Ubuntu)","text":"<pre><code>cd  # go home\nmkdir -p repos; cd repos  # create $HOME/repos if it doesn't exist; then, enter it\ngit clone https://github.com/orocos/orocos_kinematics_dynamics.git\ncd orocos_kinematics_dynamics/orocos_kdl; mkdir build; cd build\ncmake ..\nmake -j$(nproc)  # compile\nsudo make install; sudo ldconfig; cd  # install and go home\n</code></pre>"},{"location":"install-netgear-a6100.html","title":"Netgear A6100 WiFi USB Mini Adapter","text":""},{"location":"install-netgear-a6100.html#ubuntu-1604","title":"Ubuntu 16.04","text":"<pre><code>sudo apt update\nsudo apt install linux-headers-generic build-essential git\ncd $HOME\nmkdir -p src\ncd src\ngit clone https://github.com/abperiasamy/rtl8812AU_8821AU_linux.git\ncd rtl8812AU_8821AU_linux\nmake\nsudo make install\nsudo modprobe rtl8812au\n</code></pre> <p>In the original post it is <code>sudo modprobe 8812au</code>, but you will get a not found error since based on the make ouput <code>install -p -m 644 rtl8812au.ko /lib/modules/4.4.0\u201347-generic/kernel/drivers/net/wireless/</code>, the name should be <code>rtl8812au</code></p> <p>After every kernel update, need to run the following again.</p> <pre><code>make\nsudo make install\nsudo modprobe rtl8812au\n</code></pre>"},{"location":"install-netgear-a6100.html#debian-60","title":"Debian 6.0","text":"<p>First, we have to install required drivers that have not been merged with the linux kernel and do not come with most linux distros.</p> <p>We can install the required build packages, corresponding to our kernel version: <pre><code> uname -r\n sudo apt install linux-headers-$(uname -r) build-essential\n</code></pre></p> <p>Now, we will download the source code:  <pre><code> cd $HOME\n mkdir -p src\n cd src\n git clone https://github.com/diederikdehaas/rtl8812AU.git\n</code></pre></p> <p>Compile the kernel module: <pre><code> cd rtl8812AU-driver-4.3.14\n make\n</code></pre></p> <p>Now install using <code>sudo make install</code>, and perhaps a <code>depmod</code>. Then add 8812au to the end of the file <code>/etc/modules</code> with <code>tee -a</code> to tell the OS to load the driver when it boots <pre><code> sudo make install\n sudo modprobe 8812au\n echo 8812au | sudo tee -a /etc/modules\n</code></pre></p> <p>The wireless should now be working.</p>"},{"location":"install-nodejs.html","title":"Install Node.js","text":"<p>Official page: https://nodejs.org</p> <p>You may also be interested in NPM (Node.js Package Manager).</p>"},{"location":"install-nodejs.html#install-nodejs-via-node-version-manager-linux-macos-wsl","title":"Install Node.js via Node Version Manager (linux, macOS, WSL)","text":"<p>In practice, it may be useful to be able to quickly install and use different versions of Node.js via the command line.</p> <p>See https://github.com/nvm-sh/nvm#installing-and-updating</p>"},{"location":"install-nodejs.html#install-nodejs-all-platforms","title":"Install Node.js (all platforms)","text":"<p>Main downloads page (now already includes <code>npm</code>): https://nodejs.org/en/download</p> <p>Many updated versions for package managers can be found at: https://nodejs.org/en/download/package-manager/</p>"},{"location":"install-nodejs.html#install-nodejs-ubuntu-2004-focal","title":"Install Node.js (Ubuntu 20.04 Focal)","text":"<pre><code>sudo apt install nodejs # install node 10.19.0\n</code></pre>"},{"location":"install-nodejs.html#install-nodejs-ubuntu-1804-bionic","title":"Install Node.js (Ubuntu 18.04 Bionic)","text":"<pre><code>sudo apt install nodejs # install node 8.10.0\n</code></pre>"},{"location":"install-nodejs.html#install-nodejs-ubuntu-1604-xenial","title":"Install Node.js (Ubuntu 16.04 Xenial)","text":"<pre><code>sudo apt install nodejs-legacy # install node 4.2.6\n</code></pre>"},{"location":"install-nodejs.html#install-specific-nodejs-version-ubuntu","title":"Install specific Node.js version (Ubuntu)","text":"<p>First remove node:</p> <pre><code>sudo apt-get remove nodejs npm  \n</code></pre> <p>Then update &amp; upgrade:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\n</code></pre> <p>Then get your desired Node version (where setup_12.x, replace with desired major version):</p> <pre><code>curl -sL deb.nodesource.com/setup_12.x | sudo -E bash - \n</code></pre> <p>And then install your new node version:</p> <pre><code>sudo apt-get install -y nodejs\n</code></pre>"},{"location":"install-nodejs.html#check-installed-nodejs-version","title":"Check installed Node.js version","text":"<pre><code>node -v\n</code></pre>"},{"location":"install-npm.html","title":"Install NPM","text":"<p>NPM (Node.js Package Manager) is the package manager for Node.js. We used it for gitbook and similar.</p> <p>Official page: https://www.npmjs.com</p>"},{"location":"install-npm.html#install-npm-all-platforms","title":"Install NPM (all platforms)","text":"<p>Official Node.js installers now typically come with <code>npm</code> included.</p>"},{"location":"install-npm.html#install-npm-ubuntu-2004-focal","title":"Install NPM (Ubuntu 20.04 Focal)","text":"<pre><code>sudo apt install npm # Install npm 6.14.4\n</code></pre>"},{"location":"install-npm.html#install-npm-ubuntu-1804-bionic","title":"Install NPM (Ubuntu 18.04 Bionic)","text":"<pre><code>sudo apt install npm # Install npm 3.5.2\n</code></pre>"},{"location":"install-npm.html#install-npm-ubuntu","title":"Install NPM (Ubuntu)","text":"<pre><code>sudo apt install npm\n</code></pre>"},{"location":"install-npm.html#using-npm","title":"Using NPM","text":"<ul> <li>https://docs.npmjs.com/cli/install</li> </ul> <pre><code>npm install (with no args, in package dir)\nnpm install [&lt;@scope&gt;/]&lt;name&gt;\nnpm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;tag&gt;\nnpm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version&gt;\nnpm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version range&gt;\nnpm install &lt;git-host&gt;:&lt;git-user&gt;/&lt;repo-name&gt;\nnpm install &lt;git repo url&gt;\nnpm install &lt;tarball file&gt;\nnpm install &lt;tarball url&gt;\nnpm install &lt;folder&gt;\n</code></pre> <p>In global mode (with <code>-g</code> or <code>--global</code>), it installs the package  as a global package, so may require <code>sudo</code>.</p>"},{"location":"install-npm.html#troubleshooting-npm","title":"Troubleshooting NPM","text":"<p>Hack for <code>phantomjs</code> and <code>svgexport</code> is to use <code>--unsafe-perm</code> if fails even with <code>sudo</code>:</p> <pre><code>sudo npm -g install phantomjs-prebuilt --upgrade --unsafe-perm\nsuod npm -g install svgexport --unsafe-perm\n</code></pre>"},{"location":"install-numpy.html","title":"Install NumPy","text":"<p>NumPy NumPy is the fundamental package for scientific computing with Python.</p>"},{"location":"install-numpy.html#install-latest-numpy-using-pip","title":"Install latest NumPy using pip","text":"<p>This requires pip. (Use <code>pip3</code> to install the Python 3 version of NumPy):</p> <pre><code>$ sudo -H pip install numpy\n</code></pre>"},{"location":"install-numpy.html#install-numpy-using-the-ubuntu-package-manager","title":"Install Numpy using the Ubuntu package manager","text":"<pre><code>$ sudo apt install python-numpy\n</code></pre>"},{"location":"install-nvidia-drivers.html","title":"Install NVIDIA drivers","text":""},{"location":"install-nvidia-drivers.html#install-nvidia-drivers-ubuntu","title":"Install NVIDIA drivers (Ubuntu)","text":"<p>At time of writing, you can increment the number of options for NVIDIA drivers available in Ubuntu <code>Additional Drivers</code> (e.g. for teo-titan, from <code>nouveau</code>/<code>384.111</code> to <code>nouveau</code>/<code>384.130</code>/<code>390.48</code>/<code>396.18</code>) by previously running: <pre><code>sudo add-apt-repository ppa:graphics-drivers/ppa\nsudo apt update\n</code></pre></p>"},{"location":"install-nvidia-drivers.html#working-setups","title":"Working setups","text":"<ul> <li><code>304.135</code> on GT200 GeForce GTX 260 (rev a1)</li> <li><code>384.111</code> on GF114M GeForce GTX 675M (rev a1)</li> <li><code>384.130</code> on GM200 GeForce GTX TITAN X (rev a1) (more modern also work but this one goes with CUDA, see install-tensorflow-with-gpu-ubuntu-1604.md#working-setups)</li> </ul>"},{"location":"install-nvidia-drivers.html#more-cuda-related-may-end-up-in-new-page","title":"More CUDA related (may end up in new page)","text":"<p>Note how CUDA installation may affect your installed NVIDIA drivers:</p> <ul> <li>https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#handle-uninstallation</li> </ul>"},{"location":"install-opencv.html","title":"Install OpenCV","text":"<p>We use OpenCV for real-time computer vision. Official download page: link</p>"},{"location":"install-opencv.html#install-opencv-ubuntu","title":"Install OpenCV (Ubuntu)","text":"<pre><code>sudo apt install libopencv-dev\n</code></pre>"},{"location":"install-opencv.html#install-opencv-3-with-contrib-and-python-3-support","title":"Install OpenCV 3 (With contrib and Python 3 support)","text":"<p>Adapted from this post.</p> <ol> <li> <p>Upgrade any pre-installed packages:    <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> </li> <li> <p>Install developer tools used to compile OpenCV 3.0:    <pre><code>sudo apt install build-essential cmake git pkg-config\n</code></pre></p> </li> <li> <p>Install libraries and packages used to read various image and video formats from disk:    <pre><code>sudo apt install libjpeg8-dev libtiff-dev libjasper-dev libpng12-dev\nsudo apt install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev\n</code></pre></p> </li> <li> <p>Install GTK so we can use OpenCV\u2019s GUI features:    <pre><code>sudo apt install libgtk2.0-dev\n</code></pre></p> </li> <li> <p>Install packages that are used to optimize various functions inside OpenCV, such as matrix operations:    <pre><code>sudo apt install libatlas-base-dev gfortran\n</code></pre></p> </li> <li> <p>Install the Python 3.4+ headers and development files:    <pre><code>sudo apt install python3.4-dev\n</code></pre></p> </li> <li> <p>Install pip</p> </li> <li> <p>Install Numpy <pre><code>sudo -H pip install numpy\n</code></pre></p> </li> <li> <p>Download OpenCV main repo    <pre><code>mkdir -p repos\ncd repos\ngit clone https://github.com/Itseez/opencv.git\ncd opencv\ngit checkout 3.0.0\n</code></pre></p> </li> <li> <p>Download OpenCV contrib repo    <pre><code>cd ..\ngit clone https://github.com/Itseez/opencv_contrib.git\ncd opencv_contrib\ngit checkout 3.0.0\n</code></pre></p> </li> <li> <p>Configure OpenCV main repo    <pre><code>cd ../opencv\nmkdir build\ncd build\ncmake -D CMAKE_BUILD_TYPE=RELEASE \\\n      -D CMAKE_INSTALL_PREFIX=/usr/local \\\n      -D INSTALL_C_EXAMPLES=ON \\\n      -D INSTALL_PYTHON_EXAMPLES=ON \\\n      -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \\\n      -D BUILD_EXAMPLES=ON ..\n</code></pre>    The last step can also be done by hand using <code>ccmake</code>.</p> </li> <li> <p>Compile and install (This will probably take a long time, use the <code>-j</code> flag to speed up things using multithreaded compilation)    <code>bash   make -j$(nproc)  # compile    sudo make install; sudo ldconfig; cd  # install and go home</code></p> </li> </ol>"},{"location":"install-opencv.html#install-opencv-3-with-contrib-python-3-support-and-fix-for-svm_load","title":"Install OpenCV 3 (With contrib, Python 3 support and fix for SVM_load)","text":"<p>OpenCV 3 has no method to load the SVM unless the specific commit where this was fixed is used (see this and this for related info).</p> <p>To install OpenCV 3 with support for SVM loading, follow the previous steps, executing the following commands after step 10:</p> <pre><code>cd ../opencv\ngit checkout 37cbcf024c2b4160648299887a7c28d7cf28b1d3\ncd ../opencv_contrib\ngit checkout 5409d5ad560523c85c6796cc5a009347072d883c\n</code></pre> <p>Then, continue with the previous guide, executing steps 11 and 12.</p>"},{"location":"install-opencv.html#install-opencv-3-with-python-3-support-cuda-8-support-no-nvidia-driver-installed","title":"Install OpenCV 3 (With Python 3 support, CUDA 8 support, no NVIDIA driver installed)","text":"<p>To install OpenCV 3 with Python 3 support and CUDA 8 support (but no NVIDIA driver installed), follow the steps 1-9 of Install OpenCV 3 (With contrib and Python 3 support). Then, perform these steps:</p> <ol> <li> <p>Patch the <code>3.0.0</code> branch to fix the issue with removed <code>GraphCut</code> in CUDA 8    <pre><code>git format-patch -1 10896129b39655e19e4e7c529153cb5c2191a1db\ngit am &lt; 0001-GraphCut-deprecated-in-CUDA-7.5-and-removed-in-8.0.patch\n</code></pre></p> </li> <li> <p>Configure OpenCV main repo with CUDA and <code>libcuda.so</code> path    <pre><code>mkdir build\ncd build\ncmake -D CMAKE_BUILD_TYPE=RELEASE \\\n      -D CMAKE_INSTALL_PREFIX=/usr/local \\\n      -D INSTALL_C_EXAMPLES=ON \\\n      -D INSTALL_PYTHON_EXAMPLES=ON \\\n      -D BUILD_EXAMPLES=ON \\\n      -D WITH_CUDA=ON \\\n      -D BUILD_CUDA_STUBS=ON \\\n      -D CMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs..\n</code></pre>    The last step can also be done by hand using <code>ccmake</code>.</p> </li> <li> <p>Compile and install    (this will probably take a long time, use the <code>-j</code> flag to speed up things using multithreaded compilation)    <pre><code>make -j$(nproc)  # compile\nsudo make install; sudo ldconfig; cd  # install and go home\n</code></pre></p> </li> </ol>"},{"location":"install-openni-nite.html","title":"Install OpenNI2 &amp; NiTE2","text":"<p>We use OpenNI2 for ASUS and Kinect support.</p>"},{"location":"install-openni-nite.html#install-openni2-ubuntu","title":"Install OpenNI2 (Ubuntu)","text":"<pre><code>sudo apt install git libusb-1.0-0-dev libudev-dev\nsudo apt install openjdk-8-jdk  # for xenial; openjdk-6-jdk for trusty; if not using other java version.\nsudo apt install freeglut3-dev\ncd  # go home\nmkdir -p repos; cd repos  # create $HOME/repos if it doesn't exist; then, enter it\ngit clone https://github.com/occipital/OpenNI2.git  # We used to have a fork off 6857677beee08e264fc5aeecb1adf647a7d616ab with working copy of Xtion Pro Live OpenNI2 driver.\ncd OpenNI2\nmake -j$(nproc)  # compile\nsudo ln -s $PWD/Bin/x64-Release/libOpenNI2.so /usr/local/lib/  # $PWD should be /yourPathTo/OpenNI2\nsudo ln -s $PWD/Bin/x64-Release/OpenNI2/ /usr/local/lib/  # $PWD should be /yourPathTo/OpenNI2\nsudo ln -s $PWD/Include /usr/local/include/OpenNI2  # $PWD should be /yourPathTo/OpenNI2\nsudo ldconfig\n</code></pre>"},{"location":"install-openni-nite.html#install-asus-xtion-pro-live-openni-driver-ubuntu","title":"Install ASUS Xtion Pro Live OpenNI driver (Ubuntu)","text":"<pre><code>sudo apt install libopenni-sensor-primesense0 \n</code></pre>"},{"location":"install-openni-nite.html#install-kinect-openni2-driver-ubuntu","title":"Install Kinect OpenNI2 driver (Ubuntu)","text":"<p>Yes! Support for ye-oldie Kinect v1, via compiling OpenNI2 support as documented here. Approximate commands:</p> <pre><code>sudo apt install libxmu-dev libxi-dev\ncd  # go home\nmkdir -p repos; cd repos  # create $HOME/repos if it doesn't exist; then, enter it\ngit clone https://github.com/OpenKinect/libfreenect\ncd libfreenect &amp;&amp; mkdir -p build\ncd build\ncmake .. -DBUILD_OPENNI2_DRIVER=ON\nmake -j$(nproc)  # compile\nsudo make install\nsudo ldconfig\nsudo ln -s /usr/local/lib/OpenNI2-FreenectDriver/libFreenectDriver.so /usr/local/lib/OpenNI2/Drivers\n</code></pre>"},{"location":"install-openni-nite.html#set-rules-to-avoid-needing-sudo","title":"Set rules to avoid needing sudo","text":"<p>In order to allow a non-sudoer to read data from the sensors connected via USB port, you need to add a rule for udev system. </p> <p>Similar to the advice from debian udev documentation, create <code>/etc/udev/rules.d/80-persistent-local-usb.rules</code> with the following contents: <pre><code>KERNEL\u00a0==\u00a0\"ttyUSB0\",\u00a0MODE\u00a0=\u00a0\"0777\"\n</code></pre></p>"},{"location":"install-openni-nite.html#install-nite22-ubuntu","title":"Install NiTE2.2 (Ubuntu)","text":"<p>For detecting skeletons, not mandatory for YARP since long ago.</p> <pre><code>cd  # go home\nmkdir -p src; cd src  # create $HOME/src if it doesn't exist; then, enter it\nwget https://sourceforge.net/projects/roboticslab/files/External/nite/NiTE-Linux-x64-2.2.tar.bz2\ntar xvf NiTE-Linux-x64-2.2.tar.bz2\nsudo ln -s $PWD/NiTE-Linux-x64-2.2/Redist/libNiTE2.so /usr/local/lib/  # $PWD should be /yourPathTo/NiTE-Linux-x64-2.2/..\nsudo ln -s $PWD/NiTE-Linux-x64-2.2/Include /usr/local/include/NiTE-Linux-x64-2.2  # $PWD should be /yourPathTo/NiTE-Linux-x64-2.2/..\nsudo ldconfig\n</code></pre>"},{"location":"install-openrave.html","title":"Install OpenRAVE","text":"<p>We use the OpenRAVE core library for simulations. Official links:</p> <ul> <li>http://openrave.org</li> <li>OpenRAVE: Building and Installing</li> </ul> <p>Legacy documentation regarding OpenRAVE installations can be found at: (Legacy) Install OpenRAVE</p>"},{"location":"install-openrave.html#install-openrave-01361-ubuntu-2004-focal-and-newer","title":"Install OpenRAVE 0.136.1 (Ubuntu 20.04 Focal and newer)","text":"<p>No official PPA, install from source. Install dependencies that must be installed for compilation:</p> <ul> <li>Install CMake</li> <li>Install RapidJSON</li> </ul> <p>Note that you will be prompted for your password upon using <code>sudo</code>.</p> <pre><code>sudo apt install git # probably already installed\nsudo apt install libboost-filesystem-dev libboost-system-dev libboost-thread-dev libboost-iostreams-dev\nsudo apt install libxml2-dev libode-dev\nsudo apt install liblapack-dev\nsudo apt install libcollada-dom-dev\nsudo apt install libsoqt520-dev libcoin-dev\ncd  # go home\nmkdir -p repos; cd repos  # create $HOME/repos if it doesn't exist; then, enter it\ngit clone --branch master https://github.com/rdiankov/openrave.git\ncd openrave; mkdir build; cd build\ncmake .. -DOPT_VIDEORECORDING=OFF -DOPT_PYTHON=OFF -DOPT_PYTHON3=OFF -DOPT_MSGPACK=OFF -DOPT_ENCRYPTION=OFF\nmake -j$(nproc)\nsudo make install; cd  # install and go home\n</code></pre>"},{"location":"install-openrave.html#install-openrave-0540-ubuntu-1804-bionic","title":"Install OpenRAVE 0.54.0 (Ubuntu 18.04 Bionic)","text":"<p>No official PPA, install from source. Install dependencies that must be installed for compilation:</p> <ul> <li>Install CMake</li> <li>Install RapidJSON</li> </ul> <p>Note that you will be prompted for your password upon using <code>sudo</code>.</p> <pre><code>sudo apt install git # probably already installed\nsudo apt install libboost-filesystem-dev libboost-system-dev libboost-python-dev libboost-thread-dev libboost-iostreams-dev libboost-numpy-dev\nsudo apt install libqt4-dev qt4-dev-tools libxml2-dev libode-dev\nsudo apt install libsoqt4-dev libcoin80-dev\nsudo apt install liblapack-dev\nsudo apt install libcollada-dom2.4-dp-dev  # Open .zae files, avoid cmake 3.19 error on 18.04 Bionic\ncd  # go home\nmkdir -p repos; cd repos  # create $HOME/repos if it doesn't exist; then, enter it\ngit clone --branch master https://github.com/rdiankov/openrave.git\ncd openrave; mkdir build; cd build\ncmake .. -DOPT_VIDEORECORDING=OFF -DOPT_PYTHON=OFF\nmake -j$(nproc)\nsudo make install; cd  # install and go home\n</code></pre>"},{"location":"install-openrave.html#install-openrave-via-scripts-ubuntu-1804-bionic-and-ubuntu-2004-focal","title":"Install OpenRAVE via scripts (Ubuntu 18.04 Bionic and Ubuntu 20.04 Focal)","text":"<p>Tested and works on fresh installs. Easy, but not guaranteed to work, nor to be the fastest mechanism (e.g. fcl not mandatory, and osg could alternatively be installed via <code>apt</code> in 20.04 Focal). Provides:</p> <ul> <li>Ubuntu 20.04 Focal: OpenRAVE 0.54.0 with Python 2 bindings, FCL, and OpenSceneGraph viewer.</li> <li>Ubuntu 18.04 Bionic: OpenRAVE 0.9.0 with Python 2 bindings, FCL, and Qtcoin viewer.</li> </ul> <pre><code>sudo apt install git lsb-release # probably already installed\n</code></pre> <p>On a fresh 20.04 Focal had to configure git email and user, even dummy okay:</p> <pre><code>git config --global user.name \"FIRST_NAME LAST_NAME\"\ngit config --global user.email \"MY_NAME@example.com\"\n</code></pre> <p>Always pay attention to prompts for <code>sudo</code> (and insert password):</p> <pre><code>cd  # go home\ngit clone https://github.com/crigroup/openrave-installation\ncd openrave-installation\n./install-dependencies.sh\n./install-osg.sh\n./install-fcl.sh\n./install-openrave.sh\n</code></pre>"},{"location":"install-openrave.html#troubleshooting-openrave-via-scripts-ubuntu-1804-bionic-and-ubuntu-2004-focal","title":"Troubleshooting OpenRAVE via scripts (Ubuntu 18.04 Bionic and Ubuntu 20.04 Focal)","text":"<p>Also on 20.04 Focal had to run the <code>pip install ipython h5py numpy scipy wheel</code> line manually, and <code>rm -rf ~/openrave</code> to run <code>./install-openrave.sh</code> again.</p> <p>Moreover, if Ubuntu installation not fresh, beware of Python 2 vs 3 issues. Troubleshooting, make sure <code>python --version</code> gives you Python 2, else <code>update-alternatives</code> is your friend. Finally, in line with this, make sure you have the Python 2 development headers, which should be at <code>/usr/include/python2.7</code>.</p>"},{"location":"install-openrave.html#extra-tips","title":"Extra Tips","text":"<p>Note that you may end up requiring over 2 GB of free space during the installation of <code>apt</code> dependencies. To avoid that, use the <code>--no-install-recommends</code> option as in:</p> <pre><code>sudo apt install --no-install-recommends package\n</code></pre> <p>Thus, <code>apt</code> would not try to install non-critical packages marked as recommended by the dependencies of OpenRAVE.</p>"},{"location":"install-openrave.html#install-additional-plugins-flexible-collision-library-fcl","title":"Install Additional Plugins: Flexible Collision Library (FCL)","text":"<p>The following is the Cannonical PPA way, which may not work for you.</p> <pre><code>sudo apt install libfcl-dev\ncd $HOME/repos/openrave; mkdir build; cd build; cmake .. -DOPENRAVE_PLUGIN_FCLRAVE=ON\nmake -j$(nproc)\nsudo make install; cd  # install and go home\n</code></pre> <p>The CMakes options when recompiling OpenRAVE are <code>OPT_FCL_COLLISION</code> / <code>OPENRAVE_PLUGIN_FCLRAVE</code>.</p>"},{"location":"install-openrave.html#install-additional-plugins-openscenegraph-osg","title":"Install Additional Plugins: OpenSceneGraph (OSG)","text":"<p>To get OSG to compile against OpenRAVE, first, you must download a specific version (<code>OpenSceneGraph-3.4.1</code> for OpenRAVE <code>v0.9.0</code>) and set a CMake flag to use a specific Qt version (<code>-DDESIRED_QT_VERSION=4</code> for OpenRAVE <code>v0.9.0</code>):</p> <pre><code>sudo apt-get install libcairo2-dev libjasper-dev libpoppler-glib-dev libsdl2-dev libtiff5-dev libxrandr-dev\ngit clone --branch OpenSceneGraph-3.4.1 https://github.com/openscenegraph/OpenSceneGraph\ncd OpenSceneGraph &amp;&amp; mkdir build &amp;&amp; cd build\ncmake .. -DDESIRED_QT_VERSION=4\nmake -j4\nsudo make install\n</code></pre> <p>Then you must fix a set of environmental variables for OpenRAVE to actually detect OSG (else, error such as <code>Required &gt; 3.4, failed because detected 3.4.2</code>):</p> <pre><code>export LD_LIBRARY_PATH=\"/usr/local/lib64:/usr/local/lib:$LD_LIBRARY_PATH\"\nexport OPENTHREADS_INC_DIR=\"/usr/local/include\"\nexport OPENTHREADS_LIB_DIR=\"/usr/local/lib64:/usr/local/lib\"\nexport PATH=\"$OPENTHREADS_LIB_DIR:$PATH\"\n</code></pre> <p>The CMakes options when recompiling OpenRAVE are <code>OPT_QTOSG_VIEWER</code> / <code>OPENRAVE_PLUGIN_QTOSGRAVE</code> (and the viewer is called \"qtosg\" in contrast to \"qtcoin\").</p>"},{"location":"install-openrave.html#additional-information","title":"Additional Information","text":""},{"location":"install-openrave.html#offscreen-rendering-openrave-rgb-cameras","title":"Offscreen Rendering (OpenRAVE RGB Cameras)","text":"<p>OpenRAVE requires \"Offscreen Rendering\" (more specifically called \"indirect GLX rendering\") to enable virtual RGB cameras in simulated environments. This section summarizes the conclusions from openrave-yarp-plugins#48.</p>"},{"location":"install-openrave.html#symptoms-that-you-have-no-offscreen-rendering","title":"Symptoms that you have no \"Offscreen Rendering\"","text":"<ol> <li>An <code>offscreen renderer failed (check video driver), disabling</code> message, then constant <code>cannot render offscreen</code> messages.</li> <li>The OpenRAVE <code>showsensors</code> examples open the main environment window, but no separate window is open displaying the RGB camera output:<ul> <li>OpenRAVE src/cppexamples/orshowsensors.cpp</li> <li>OpenRAVE python/examples/showsensors.py (requires Python <code>openravepy</code> module)</li> </ul> </li> <li>Cannot publish RGB camera output via YarpOpenraveGrabber (perma) nor YarpOpenraveRGBDSensor (perma).</li> <li>You cannot generate <code>.jpg</code> files with the following snippet:<ul> <li>jgvictores snippets/coin3d (perma) (requires <code>libsimage-dev</code>)</li> </ul> </li> </ol>"},{"location":"install-openrave.html#solution-as-of-openrave-v090-all-requirements-must-be-met","title":"Solution (as of OpenRAVE <code>v0.9.0</code>, all requirements must be met)","text":"<ol> <li>Install working NVIDIA drivers</li> <li> <p>Create a custom <code>/usr/share/X11/xorg.conf.d/80-custom-glx.conf</code> file (in old Ubuntu distros, this would be part of <code>/etc/X11/xorg.conf</code>) with the following contents:   <pre><code>Section \"ServerFlags\"\n    Option \"AllowIndirectGLX\" \"on\"\n    Option \"IndirectGLX\" \"on\"\nEndSection\n</code></pre></p> </li> <li> <p>Forget about environmental variables <code>COIN_FULL_INDIRECT_RENDERING=1</code> or <code>COIN_DONT_INFORM_INDIRECT_RENDERING=1</code> unless you're concerned with warnings: no real effect.</p> </li> <li>Reboot (resarting the desktop environment should suffice)</li> <li>For OpenRAVE, use <code>qtcoin</code> as viewer (and not <code>qtosg</code>): <code>openrave --viewer qtcoin</code> (parameter works in several other contexts as well)</li> </ol> <p>If you have no NVIDIA, probably the most interesting read is at openrave-yarp-plugins#48 on DRI and AiGLX, but no results here yet.</p>"},{"location":"install-openrave.html#generate-databases","title":"Generate Databases","text":"<ul> <li>https://github.com/roboticslab-uc3m/teo-openrave-models/tree/master/scripts (permalink)</li> <li>https://github.com/roboticslab-uc3m/teo-openrave-models/issues/3</li> <li>https://github.com/roboticslab-uc3m/openrave-tools</li> <li>https://github.com/roboticslab-uc3m/openrave-yarp-plugins</li> </ul>"},{"location":"install-openrave.html#source-code-hacks","title":"Source Code Hacks","text":"<p>Here's a small patch tested on OpenRAVE <code>v0.9.0</code> to enhance console output on joint limits (provides joint name, and angles in degrees):</p> <pre><code>cd $HOME/repos/openrave\nwget https://github.com/roboticslab-uc3m/openrave-yarp-plugins/files/3896779/98-limit-output.patch.log\ngit apply 98-limit-output.patch.log # modifies `plugins/basecontrollers/idealcontroller.cpp`\nwget https://github.com/roboticslab-uc3m/openrave-yarp-plugins/files/3898656/98-limit-output-2.patch.log\ngit apply 98-limit-output-2.patch.log # modifies `src/libopenrave/kinbody.cpp`\ncd build; cmake ..\nmake -j$(nproc)\nsudo make install; cd  # install and go home\n</code></pre>"},{"location":"install-openrave.html#tutorials-and-examples","title":"Tutorials and Examples","text":"<ul> <li>http://openrave.org/docs/latest_stable/examples</li> <li>http://openrave.org/docs/latest_stable/coreapihtml/cpp_examples.html</li> <li>https://scaron.info/teaching/getting-started-with-openrave.html</li> <li>https://legacy.gitbook.com/book/crigroup/osrobotics (gitbook)</li> </ul>"},{"location":"install-openrave.html#similar-and-related-projects","title":"Similar and Related Projects","text":"<ul> <li>https://github.com/roboticslab-uc3m?q=openrave (roboticslab-uc3m)</li> <li>https://github.com/personalrobotics?q=openrave</li> <li>https://github.com/stephane-caron?tab=repositories&amp;q=openrave</li> <li>https://github.com/crigroup?q=openrave</li> <li>https://github.com/roboticsleeds?q=openrave</li> <li>https://github.com/jsk-ros-pkg/openrave_planning</li> <li>https://github.com/BerkeleyAutomation/OpenRAVE-motion-planner</li> <li>https://github.com/gtrll/orgpmp2</li> <li>http://opengrasp.sourceforge.net (https://sourceforge.net/p/opengrasp/code/HEAD/tree/)</li> <li>http://www.iearobotics.com/wiki/index.php?title=OpenRave_y_robots_modulares</li> <li>http://openrave.programmingvision.com/wiki/index.php/Projects</li> <li>https://github.com/MichalXh/debug_ikfast</li> </ul>"},{"location":"install-openrave.html#external-installation-tutorialscript-links","title":"External Installation Tutorial/Script Links","text":"<ul> <li>https://scaron.info/teaching/installing-openrave-on-ubuntu-16.04.html</li> <li>https://github.com/crigroup/openrave-installation<ul> <li>Older by same user: [ref1, trusty, see next link if still in trouble with FCL].</li> <li>Older by same user: [ref2, xenial].</li> </ul> </li> <li>[ref3, xenial].</li> <li>Not tested: ROS packages such as <code>ros-indigo-openrave</code>/<code>ros-kinetic-openrave</code>. According to this, should be fine but perhaps missing components such as <code>openravepy</code>. According to http://docs.ros.org/melodic/api/moveit_tutorials/html/doc/ikfast/ikfast_tutorial.html, may be as easy as:   <pre><code>sudo apt install ros-indigo-openrave\nexport PYTHONPATH=$PYTHONPATH:`openrave-config --python-dir`\n</code></pre></li> </ul>"},{"location":"install-openrave.html#docker","title":"Docker","text":"<ul> <li>https://github.com/roboticslab-uc3m/teo-demos-misc/pkgs/container/teo-demos-misc -&gt; <code>ghcr.io/roboticslab-uc3m/teo-demos-misc:latest</code></li> <li>https://hub.docker.com/r/cielavenir/openrave: jammy tag works (including graphics and python)</li> <li>https://hub.docker.com/search?q=openrave&amp;type=image</li> <li>https://hub.docker.com/r/hamzamerzic/openrave</li> <li>https://hub.docker.com/r/personalrobotics/ros-openrave</li> </ul>"},{"location":"install-pcan.html","title":"Install PCAN-M.2 Driver for Linux (Ubuntu 16.04)","text":""},{"location":"install-pcan.html#links-of-interest","title":"Links of interest","text":"<ul> <li>Official page:  link</li> <li>Manual:         link</li> </ul>"},{"location":"install-pcan.html#driver-installation","title":"Driver installation","text":"<pre><code>cd &amp;&amp; mkdir -p ~/src/peak &amp;&amp; cd ~/src/peak\nwget https://www.peak-system.com/fileadmin/media/linux/files/peak-linux-driver-8.9.0.tar.gz\ntar -xzf peak-linux-driver-8.9.0.tar.gz # Untar the compressed tarball file\ncd peak-linux-driver-8.9.0/ \nmake -C driver PCI=PCI_SUPPORT PCIEC=NO_PCIEC_SUPPORT DNG=NO_DONGLE_SUPPORT USB=NO_USB_SUPPORT ISA=NO_ISA_SUPPORT PCC=NO_PCCARD_SUPPORT\nsudo make -C driver install\nmake -C lib &amp;&amp; sudo make -C lib install\nmake -C test &amp;&amp; sudo make -C test install # test utilities (optional)\nsudo modprobe pcan # driver loading\n</code></pre>"},{"location":"install-pcan.html#activate-canbuspeak-in-yarp-devices","title":"Activate CanBusPeak in yarp-devices","text":"<p>Note: These lines assume that yarp-devices has been cloned, configured and compiled. If not, follow the installation instructions.</p> <pre><code>cd &amp;&amp; cd repos/yarp-devices/build/\ncmake .. -DENABLE_CanBusPeak=ON  # configure yarp-devices to use CanBusPeak\nmake -j$(nproc) &amp;&amp; sudo make install # Compile and install\ncd # go home\n</code></pre>"},{"location":"install-pcl.html","title":"Install PCL","text":"<p>We use the Point Coud Library (PCL) for 2D/3D image and point cloud processing. Official download page: link</p> <ul> <li>First install OpenNI2 &amp; NiTE2 for Xtion Pro Live support.</li> </ul>"},{"location":"install-pcl.html#install-pcl-172-1trusty6-with-vtk-580-141ubuntu3-ubuntu-1404","title":"Install PCL 1.7.2-1+trusty6 with VTK 5.8.0-14.1ubuntu3 (Ubuntu 14.04)","text":"<p>For Trusty and similar versions, we need to add the jochen-sprickerhof PPA [ref], while VTK is available directly as part of <code>universe</code> [ref].</p> <pre><code>sudo add-apt-repository ppa:v-launchpad-jochen-sprickerhof-de/pcl\nsudo apt update\nsudo apt install libpcl-all libpcl-all-dev\nsudo apt install libopenni-sensor-primesense0 # no pcl-tools here; and libopenni-sensor-pointclouds0 cannot be installed simultaneously.\n</code></pre>"},{"location":"install-pcl.html#install-pcl-172-3utopic1-with-vtk-ubuntu-1410","title":"Install PCL 1.7.2-3~utopic1 with VTK (Ubuntu 14.10)","text":"<p>For Utopic and similar versions, we need to add the jochen-sprickerhof PPA [ref].</p> <pre><code>sudo add-apt-repository ppa:v-launchpad-jochen-sprickerhof-de/pcl\nsudo apt update\nsudo apt install libpcl-dev\nsudo apt install pcl-tools # no sensor here, but libopenni-sensor-primesense0 may be found elsewhere\n</code></pre>"},{"location":"install-pcl.html#install-pcl-172-14build1-with-vtk-620dfsg1-10build1-ubuntu-1604","title":"Install PCL 1.7.2-14build1 with VTK 6.2.0+dfsg1-10build1 (Ubuntu 16.04)","text":"<p>PCL is available directly as part of <code>universe</code> in modern Ubuntu distros [ref].</p> <pre><code>sudo apt install libpcl-dev  # depends: libvtk6-dev\n</code></pre> <p>Developers may find obscure <code>No rule to make target '/usr/lib/x86_64-linux-gnu/libproj.so'</code> errors in their PCL-dependent applications, this is due to a known bug. Workaround (SO answer):</p> <pre><code>sudo apt install libproj-dev\n</code></pre> <p>Besides, remove a superfluous <code>vtkproj4</code> item from the list of PCL libraries in your CMake code:</p> <pre><code>find_package(PCL 1.7) # you probably have this around somewhere\n\n# add these lines afterwards\nif(DEFINED PCL_LIBRARIES)\n    list(REMOVE_ITEM PCL_LIBRARIES \"vtkproj4\")\nendif()\n</code></pre> <p>See also PointCloudLibrary/pcl#2406 (linker error in case new point types are added).</p>"},{"location":"install-pcl.html#install-pcl-from-source","title":"Install PCL (From source)","text":"<p>Link: install from source.</p>"},{"location":"install-pcl.html#install-pcl-for-any-distro-with-cuda-for-kinfu","title":"Install PCL (For any distro with CUDA for KinFu)","text":"<p>No official ppa, install CUDA, then install from source setting additional flags to get <code>pcl_kinfu_largeScale</code>, <code>pcl_kinfu_largeScale_mesh_output</code>, <code>pcl_kinfu_largeScale_texture_output</code>.</p> <p>See additional info here.</p>"},{"location":"install-pip.html","title":"Install pip","text":"<p>Pip (Package Installer for Python) is the  PyPA recommended tool for installing Python packages.</p> <p>Official page: https://pypi.python.org/pypi/pip</p>"},{"location":"install-pip.html#install-pip3-for-python3-ubuntu-2004","title":"Install pip3 for python3 (Ubuntu 20.04)","text":"<p>First, install Python.</p> <p>Then:</p> <pre><code>sudo apt install python3-pip\n</code></pre>"},{"location":"install-pip.html#install-latest-pip-on-gnulinux","title":"Install latest pip on GNU/Linux","text":"<pre><code>wget https://bootstrap.pypa.io/get-pip.py | sudo python\n</code></pre>"},{"location":"install-pip.html#install-latest-pip3-on-gnulinux","title":"Install latest pip3 on GNU/Linux","text":"<pre><code>wget https://bootstrap.pypa.io/get-pip.py | sudo python3\n</code></pre>"},{"location":"install-pip.html#troubleshooting","title":"Troubleshooting","text":"<p>There is a bug in some versions of pip that disables pip after an upgrade (<code>pip install --upgrade pip</code>) with the following error:</p> <pre><code>Traceback (most recent call last):\n  File \"/usr/bin/pip3\", line 9, in &lt;module&gt;\n    from pip import main\nImportError: cannot import name 'main'\n</code></pre> <p>The simplest fix found here is to run the following command to upgrade pip by installing again the latest version (use <code>python</code> instead for python2):</p> <pre><code>wget https://bootstrap.pypa.io/get-pip.py | sudo python3\n</code></pre>"},{"location":"install-pygame.html","title":"Install Pygame","text":"<p>We use pygame for graphic-user interfaces.</p> <p>Official page: link.</p>"},{"location":"install-pygame.html#install-pygame-ubuntu","title":"Install Pygame (Ubuntu)","text":"<pre><code>sudo apt install python-pygame\n</code></pre>"},{"location":"install-pypcd.html","title":"Install pypcd","text":"<p>Pure Python module to read and write point clouds stored in the PCD file format, used by the Point Cloud Library. Official website:</p> <ul> <li>https://github.com/dimatura/pypcd</li> </ul>"},{"location":"install-pypcd.html#install-from-sources","title":"Install from sources","text":"<p>Open a terminal and execute the following commands (use <code>python3</code> instead to install it for Python 3):</p> <pre><code>cd\nmkdir -p repos\ncd repos\ngit clone https://github.com/dimatura/pypcd.git\ncd pypcd\nsudo python setup.py install\n</code></pre>"},{"location":"install-python.html","title":"Install Python","text":"<p>Official page: https://python.org</p> <p>You may also be interested in pip (Package Installer for Python).</p>"},{"location":"install-python.html#install-python-3-windows","title":"Install Python 3 (Windows)","text":"<p>Best to download and launch the Installer from the official page: https://python.org &gt; <code>Downloads</code> &gt; <code>Download for Windows</code></p> <p>During installation, activate the <code>Add Python 3.xx to PATH</code> option (where <code>.xx</code> refers the version you downloaded), and then <code>Install Now</code>.</p>"},{"location":"install-python.html#install-python-3-ubuntu-2004","title":"Install Python 3 (Ubuntu 20.04)","text":"<pre><code>sudo apt install python-is-python3\nsudo apt install python3\n</code></pre>"},{"location":"install-python.html#install-python-3-ubuntu-1804","title":"Install Python 3 (Ubuntu 18.04)","text":"<pre><code>sudo apt install python3\n</code></pre>"},{"location":"install-rapidjson.html","title":"Install RapidJSON","text":"<p>RapidJSON has become a hard dependency for OpenRAVE. Please note OpenRAVE requires the latest master branch of RapidJSON, therefore installing the <code>rapidjson-dev</code> package via apt will probably not work.</p> <p>This is a header-only library, but you'll probably want to disable examples and tests in order to avoid compiling stuff:</p> <pre><code>mkdir -p repos &amp;&amp; cd repos\ngit clone https://github.com/Tencent/rapidjson.git\ncd rapidjson\nmkdir build &amp;&amp; cd build\ncmake .. -DRAPIDJSON_BUILD_DOC=OFF -DRAPIDJSON_BUILD_EXAMPLES=OFF -DRAPIDJSON_BUILD_TESTS=OFF\nmake &amp;&amp; sudo make install\n</code></pre>"},{"location":"install-realsense2.html","title":"Install realsense2","text":"<p>Official source code repository and binary packages: IntelRealSense/librealsense</p>"},{"location":"install-realsense2.html#install-realsense2-from-binary-distribution-ubuntu-1604-xenial-1804-bionic-and-2004-focal","title":"Install realsense2 from binary distribution (Ubuntu 16.04 Xenial, 18.04 Bionic and 20.04 Focal)","text":"<p>We'll just follow the official docs (perma):</p> <ol> <li> <p>Register the server's public key:    <pre><code>sudo apt-key adv --keyserver keys.gnupg.net --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE\n</code></pre></p> </li> <li> <p>Add the server to the list of repositories:</p> <ul> <li> <p>Ubuntu 20.04 Focal:  <pre><code>sudo add-apt-repository \"deb http://realsense-hw-public.s3.amazonaws.com/Debian/apt-repo focal main\" -u\n</code></pre></p> </li> <li> <p>Ubuntu 18.04 Bionic:  <pre><code>sudo add-apt-repository \"deb http://realsense-hw-public.s3.amazonaws.com/Debian/apt-repo bionic main\" -u\n</code></pre></p> </li> <li> <p>Ubuntu 16.04 Xenial:  <pre><code>sudo add-apt-repository \"deb http://realsense-hw-public.s3.amazonaws.com/Debian/apt-repo xenial main\" -u\n</code></pre></p> </li> </ul> </li> <li> <p>Install packages:    <pre><code>sudo apt install librealsense2-dkms librealsense2-utils librealsense2-dev\n</code></pre></p> </li> <li> <p>Verify installation:</p> </li> <li>Reconnect the Intel RealSense depth camera and run: <code>realsense-viewer</code></li> <li>Verify that the kernel is updated: <code>modinfo uvcvideo | grep \"version:\"</code> should include the <code>realsense</code> string</li> </ol>"},{"location":"install-realsense2.html#install-realsense2-from-sources-ubuntu-1404-trusty-and-2004-bionic","title":"Install realsense2 from sources (Ubuntu 14.04 Trusty and 20.04 Bionic)","text":"<p>There is an extensive guide here (perma). The following steps have been tested on Ubuntu 20.04 (Focal), including a few hints from this issue:</p> <pre><code>sudo apt install libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev libusb-1.0-0-dev\nmkdir -p ~/repos &amp;&amp; cd ~/repos\ngit clone https://github.com/IntelRealSense/librealsense\nmkdir -p librealsense/build &amp;&amp; cd librealsense/build\ncmake .. -DFORCE_RSUSB_BACKEND=true -DCMAKE_BUILD_TYPE=release\nmake -j$(nproc)\nsudo make install\n</code></pre> <p>You'll need to copy or symlink udev rules prior to using the camera:</p> <pre><code>sudo ln -s ~/repos/librealsense/config/99-realsense-libusb.rules /etc/udev/rules.d/99-realsense-libusb.rules\n</code></pre>"},{"location":"install-realsense2.html#working-setups","title":"Working setups","text":"<ul> <li> <p>Ubuntu 20.04 Focal: Kernel <code>5.4.0-53-generic</code>. Via <code>sudo apt install librealsense2-dkms</code> got <code>modinfo uvcvideo | grep \"version:\"</code> to return <code>version: 1.1.2.realsense-1.3.16 srcversion: 7DDF3FE59FEE362F69D0241</code>. Due to Ubuntu system dependencies (mostly graphical/<code>libgtk-3-dev</code>-related), had to compile apart. Used <code>v2.29.0</code> to maintain installation close to that of Ubuntu 18.04 Bionic machine (at time of writing, below), got <code>realsense-viewer</code> which was compatible with sensor firmware <code>05.11.15.00</code>. Again, only recognizes USB 2.1, and have to set 6 fps.</p> </li> <li> <p>Ubuntu 18.04 Bionic: Kernel <code>4.15.0-126-generic</code> (<code>linux-image-generic</code> with <code>linux-headers-generic</code>). Via <code>sudo apt install librealsense2-dkms</code> got <code>modinfo uvcvideo | grep \"version:\"</code> to return <code>version: 1.1.2.realsense-1.3.14 srcversion: BE1821F94C3D410077ACD10</code>. Due to ROS Melodic dependencies (mostly graphical/<code>libgtk-3-dev</code>-related), had to compile apart, <code>v2.29.0</code>, got <code>realsense-viewer</code> which helped upgrade the sensor firmware to <code>05.11.15.00</code> and finally get rid of the \"recognized as Keyboard\" (as well as the <code>uvcvideo: Failed to query (GET_CUR) UVC control 1 on unit 3</code>). Aditionally, only recognizes USB 2.1, and have to set 6 fps.</p> </li> </ul>"},{"location":"install-realsense2.html#similar-and-related","title":"Similar and Related","text":"<ul> <li>robotology/yarp-device-realsense2</li> </ul>"},{"location":"install-ros.html","title":"Install ROS","text":"<p>ROS is used to communicate with a wide variety of robots. Specifically, we use it to communicate with TIAGo, a robot from PAL Robotics.</p>"},{"location":"install-ros.html#install-ros-kinetic-kame-ubuntu-1604","title":"Install ROS Kinetic Kame (Ubuntu 16.04)","text":"<p>Add the ros repository to apt sources and setup the repository keys <pre><code>sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" &gt; /etc/apt/sources.list.d/ros-latest.list'\nsudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654\n</code></pre></p> <p>Download and install ROS <pre><code>sudo apt update\nsudo apt install ros-kinetic-desktop-full\nsudo apt install python-rosinstall python-rosinstall-generator python-wstool build-essential\nsudo apt install ros-kinetic-catkin python-catkin-tools \nsudo rosdep init\nrosdep update\n</code></pre></p> <p>Extend the environment to include ROS commands in any new opened console <pre><code>echo \"source /opt/ros/kinetic/setup.bash\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></p>"},{"location":"install-ros.html#install-ros-indigo-igloo-ubuntu-1310-and-1404","title":"Install ROS Indigo Igloo (Ubuntu 13.10 and 14.04)","text":"<p>Add the ros repository to apt sources and setup the repository keys <pre><code>sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" &gt; /etc/apt/sources.list.d/ros-latest.list'\nsudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116\n</code></pre></p> <p>Download and install ROS <pre><code>sudo apt update\nsudo apt install git python-rosinstall ros-indigo-desktop-full python-catkin-tools ros-indigo-joint-state-controller ros-indigo-twist-mux ros-indigo-ompl ros-indigo-controller-manager ros-indigo-moveit-core ros-indigo-moveit-ros-perception ros-indigo-moveit-ros-move-group ros-indigo-moveit-kinematics ros-indigo-moveit-ros-planning-interface ros-indigo-moveit-simple-controller-manager ros-indigo-moveit-planners-ompl ros-indigo-joy ros-indigo-joy-teleop ros-indigo-teleop-tools ros-indigo-control-toolbox ros-indigo-sound-play ros-indigo-navigation ros-indigo-eband-local-planner ros-indigo-depthimage-to-laserscan  ros-indigo-openslam-gmapping ros-indigo-gmapping ros-indigo-moveit-commander ros-indigo-geometry-experimental\n</code></pre></p> <p>Extend the environment to include ROS commands in any new opened console <pre><code>echo \"source /opt/ros/indigo/setup.bash\" &gt;&gt; ~/.bashrc\n</code></pre></p>"},{"location":"install-ros.html#extend-the-installation","title":"Extend the installation","text":"<p>To look for more ROS packages available for installation, execute <pre><code>apt-cache search ros-indigo\n</code></pre></p>"},{"location":"install-scikit-image.html","title":"Install Scikit-Image","text":"<p>Scikit-image is a Python library for computer vision. Installation using <code>pip</code> is quite straightforward.</p> <p>Note that you will be prompted for your password upon using sudo a couple of times.</p>"},{"location":"install-scikit-image.html#install-stable-version","title":"Install stable version","text":"<p>Installing the stable version is simple (Use <code>pip3</code> instead to install the Python 3 version):</p> <pre><code>$ sudo -H pip install scikit-image\n</code></pre>"},{"location":"install-scikit-image.html#install-development-version-pre-013","title":"Install development version (pre-0.13)","text":"<p>The development version has to be compiled from the source code. Here are the steps (Use <code>pip3</code> instead to install the Python 3 version):</p> <ol> <li>Clone development repository: <pre><code>$ git clone https://github.com/scikit-image/scikit-image.git\n</code></pre></li> <li>Upgrade Cython to version <code>cython&gt;=0.21</code> (if that version isn't already installed) <pre><code>$ sudo -H pip install --upgrade cython\n</code></pre></li> <li>Installation: <pre><code>$ cd scikit-image\n$ sudo -H pip install -e .\n</code></pre></li> </ol>"},{"location":"install-setuptools.html","title":"Install Setuptools","text":"<p>Setuptools is a fully-featured, actively-maintained, and stable library designed to facilitate packaging Python projects</p>"},{"location":"install-setuptools.html#install-setuptools-using-pip","title":"Install Setuptools using pip","text":"<p>This requires pip.</p> <pre><code>sudo -H pip install setuptools\n</code></pre>"},{"location":"install-setuptools.html#install-setuptools-using-pip3","title":"Install Setuptools using pip3","text":"<p>This requires pip3.</p> <pre><code>sudo -H pip3 install setuptools\n</code></pre>"},{"location":"install-softgym.html","title":"Install SoftGym","text":"<p>Borrowed from SoftGym</p>"},{"location":"install-softgym.html#install-softgym-ubuntu-1604-cuda-92-nvidia-driver-version-44064","title":"Install SoftGym (Ubuntu 16.04, CUDA 9.2, Nvidia driver version 440.64)","text":""},{"location":"install-softgym.html#dependencies","title":"Dependencies","text":"<pre><code>sudo apt-get install build-essential libgl1-mesa-dev freeglut3-dev\n</code></pre>"},{"location":"install-softgym.html#install","title":"Install","text":"<ol> <li> <p>Clone SoftGym repo <pre><code>git clone https://github.com/FranBesq/softgym.git\n</code></pre></p> </li> <li> <p>Create conda environment Create a conda environment and activate it: <code>conda env create -f environment.yml</code></p> </li> <li> <p>Compile PyFleX: Go to the root folder of softgym and run <code>. ./prepare_1.0.sh</code>. After that, compile PyFleX with CMake &amp; Pybind11 by running <code>. ./compile_1.0.sh</code> Please see the example test scripts and the bottom of <code>bindings/pyflex.cpp</code> for available APIs.</p> </li> </ol>"},{"location":"install-softgym.html#install-softgym-using-nvidia-docker-any-ubuntu-and-cuda-version","title":"Install SoftGym (using nvidia-docker, any Ubuntu and CUDA version)","text":"<p>A Dockerfile and pre-built Docker container for compiling SoftGym exists. Part of the docker solutions are borrowed from PyFlex and SoftGym</p>"},{"location":"install-softgym.html#prerequisite","title":"Prerequisite","text":"<ul> <li>Install docker-ce</li> <li>Install nvidia-docker</li> <li>Install Anaconda</li> <li>Install Pybind11 using <code>conda install pybind11</code></li> </ul>"},{"location":"install-softgym.html#running-pre-built-dockerfile","title":"Running pre-built Dockerfile","text":"<ul> <li> <p>First clone SoftGym repo   <pre><code>git clone https://github.com/FranBesq/softgym.git\n</code></pre></p> </li> <li> <p>Pull the pre-built docker file   <pre><code>sudo docker pull xingyu/softgym\n</code></pre></p> </li> <li> <p>Assuming you are using conda, using the following command to run docker, which will mount the python environment and SoftGym into the docker container. Make sure you have replaced <code>PATH_TO_SoftGym</code> and <code>PATH_TO_CONDA</code> with the corresponding paths (make sure to use absolute path!).   <pre><code>nvidia-docker run \\\n  -v PATH_TO_SoftGym:/workspace/softgym \\\n  -v PATH_TO_CONDA:PATH_TO_CONDA \\\n  -v /tmp/.X11-unix:/tmp/.X11-unix \\\n  --gpus all \\\n  -e DISPLAY=$DISPLAY \\\n  -e QT_X11_NO_MITSHM=1 \\\n  -it xingyu/softgym:latest bash\n</code></pre>   As an example:   <pre><code>nvidia-docker run \\\n  -v ~/softgym:~/softgym \\\n  -v ~/software/miniconda3/:~/software/miniconda3/ \\\n  -v /tmp/.X11-unix:/tmp/.X11-unix \\\n  --gpus all \\\n  -e DISPLAY=$DISPLAY \\\n  -e QT_X11_NO_MITSHM=1 \\\n  -it xingyu/softgym:latest bash\n</code></pre>   This solution follows this tutorial for running GL and CUDA application inside the docker.</p> </li> <li> <p>Now you are in the Docker environment. Go to the softgym directory, create a conda env, set PATH and compile PyFlex   <pre><code>cd softgym\nexport PATH=\"PATH_TO_CONDA/bin:$PATH\"\nexport PYFLEXROOT=${PWD}/PyFlex\nexport PYTHONPATH=${PYFLEXROOT}/bindings/build:$PYTHONPATH\nexport LD_LIBRARY_PATH=${PYFLEXROOT}/external/SDL2-2.0.4/lib/x64:$LD_LIBRARY_PATH\n\nconda create -n softgym #you can add here packages, not needed\nconda activate softgym\n\n./compile_1.0.sh\n</code></pre></p> </li> <li> <p>Now that PyFleX has properly compiled. You can move outside docker (<code>Ctrl+D</code>), export the environment variables and start playing with the examples.   <pre><code>cd repos/softgym\n\nexport PATH=\"PATH_TO_CONDA/bin:$PATH\"\nexport PYFLEXROOT=${PWD}/PyFlex\nexport PYTHONPATH=${PYFLEXROOT}/bindings/build:$PYTHONPATH\nexport LD_LIBRARY_PATH=${PYFLEXROOT}/external/SDL2-2.0.4/lib/x64:$LD_LIBRARY_PATH\n\nconda activate softgym\n#Running an example\n\npython examples/random_env.py --env_name ClothFlatten\n\n#Probably missing a lot of packages, to install them:\nconda install -c conda-forge pkgname\n#For example\nconda install -c conda-forge numpy\n</code></pre></p> </li> <li> <p>If running the example fails to <code>import softgym.*</code> this is probably due to <code>PYTHONPATH</code> issues and you should make sure the interpreter knows where to look for softgym package. More info on PYTHONPATH.</p> </li> </ul>"},{"location":"install-spacenav.html","title":"Install Spacenav","text":"<p>We use Spacenav for interfacing with 3Dconnexion's input devices (like the SpaceNavigator 6 DOF mouse).</p> <p>Official page: link.</p>"},{"location":"install-spacenav.html#install-spacenav-ubuntu","title":"Install Spacenav (Ubuntu)","text":"<p>You'll get the development files from:</p> <pre><code>sudo apt install libspnav-dev spacenavd\n</code></pre> <p>Omit the <code>spacenavd</code> package in case you don't want to install the daemon (e.g. you won't connect the device to your PC).</p>"},{"location":"install-sphinxbase.html","title":"Install sphinxbase","text":"<p><code>sphinxbase</code> is a dependency for compiling pocketsphinx from source.</p>"},{"location":"install-sphinxbase.html#install-sphinxbase-from-source-ubuntu","title":"Install sphinxbase  from source (Ubuntu)","text":"<p>Install sphinxbase  from source (Ubuntu): <pre><code>sudo apt install autoconf libtool\nsudo apt install bison\ncd  # go home\nmkdir -p repos; cd repos  # create $HOME/repos if it doesn't exist; then, enter it\ngit clone https://github.com/cmusphinx/sphinxbase.git\ncd sphinxbase\n./autogen.sh\n./configure\nmake -j$(nproc)  # compile\nsudo make install  # install\n</code></pre></p>"},{"location":"install-sphinxbase.html#not-good-for-latest-pocketsphinx-install-sphinxbase-from-apt-ubuntu","title":"Not good for latest pocketsphinx: Install sphinxbase from apt (Ubuntu)","text":"<p>Not good for latest pocketsphinx (ATOW): Install sphinxbase from apt (Ubuntu). On Xenial, installs <code>0.8+5prealpha-2ubuntu1</code>. <pre><code>sudo apt install libsphinxbase-dev\n</code></pre></p>"},{"location":"install-swig.html","title":"Install SWIG","text":"<p>We use SWIG to generate language bindings for Python/Java/etc. from C/C++ code. Official: website, GitHub.</p>"},{"location":"install-swig.html#install-swig-ubuntu-1604-and-later","title":"Install SWIG (Ubuntu 16.04 and later)","text":"<pre><code>sudo apt install swig\n</code></pre>"},{"location":"install-swig.html#install-swig-ubuntu-1410","title":"Install SWIG (Ubuntu 14.10)","text":"<p>We usually want to generate YARP language bindings, which now requires SWIG 3.</p> <pre><code>sudo apt install swig3.0\n</code></pre>"},{"location":"install-tensorflow.html","title":"Install TensorFlow","text":"<p>We use TensorFlow as a Keras backend. Official page: link</p> <p>Also see install-tensorflow_cc for an alternative that is more prepared for use with CMake.</p>"},{"location":"install-tensorflow.html#dependencies-for-building-tensorflow","title":"Dependencies for building TensorFlow","text":"<p>To build TensorFlow from source (e.g. for GPU support), you'll need:</p> <ul> <li>Bazel</li> <li>The python <code>enum</code> module, which on Ubuntu can be installed via: <code>sudo apt install python-enum34</code></li> </ul>"},{"location":"install-tensorflow.html#install-tensorflow-with-gpu-ubuntu-1604","title":"Install TensorFlow with GPU (Ubuntu 16.04)","text":"<p>This page is to track working setups and common pitfalls. It is not replacement for the official documentation, above. Before attempting GPU installation, check the official requirements on GPU (micro-architecture, etc), and go through all the official steps during the process.</p> <p>Some very important steps are those of the Post-installation Actions (CUDA). The end of your <code>.profile</code> will probably end up looking something like: <pre><code># CUDA\nPATH=/usr/local/cuda/bin${PATH:+:${PATH}}\nLD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n# cuDNN\nLD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}/usr/local/cuda/extras/CUPTI/lib64\n</code></pre> Note: better than <code>LD_LIBRARY_PATH</code>, put in correct place and run <code>ldconfig</code>.</p>"},{"location":"install-tensorflow.html#working-setups","title":"Working setups","text":""},{"location":"install-tensorflow.html#rtx-2080-ti","title":"RTX 2080 Ti","text":"<ul> <li>CUDA 10, cuDNN 7.5.</li> <li>As general practice, better <code>.run</code> than <code>.deb</code>: e.g. gives option to install CUDA without modifying your installed NVIDIA drivers)</li> <li>As in https://medium.com/@saitejadommeti/building-tensorflow-gpu-from-source-for-rtx-2080-96fed102fcca ended up using bazel <code>0.18.0</code> via <code>.run</code> (the <code>.deb</code> had a java package issue), and tensorflow <code>r1.11</code>. Otherwise ended up with Bazel not finding tensorflow configuration.</li> <li>keras via pip, 2.2.3 or similar with no issues.</li> </ul>"},{"location":"install-tensorflow.html#gm200-geforce-gtx-titan-x-rev-a1","title":"GM200 GeForce GTX TITAN X rev a1","text":"<ul> <li>CUDA 9.0 (uninstalls any NVIDIA driver, installs <code>384.130</code> driver, so you may not need to Install NVIDIA drivers). We go to legacy and get <code>deb (local)</code> (<code>cuda-repo-ubuntu1604-9-0-local_9.0.176-1_amd64.deb</code> and patches from here). Official documentation is currently at CUDA 9.0, and here they say 9.1 will be skipped. + cuDNN v7.1.3 (April 17, 2018) for CUDA 9.0.<ul> <li>tensorflow 1.8-rc0 at e1e5f305e5359fd50340ea76ea2f737f6e87a0d7 (tried 1.7 but was broken for GPU). From source, with CUDA, said Yes to cuDNN 7.0 even with 7.1.3, without TensorRT (Ubuntu 16.04 local deb v3 was installed, but said default No).</li> <li>tensorflow 1.5 (directly using <code>tensorflow-gpu</code> binary), without TensorRT.</li> </ul> </li> <li>Not tested: CUDA 8.0 + tensorflow 1.4 (directly using <code>tensorflow-gpu</code> binary)</li> </ul>"},{"location":"install-tensorflow.html#non-working-setups","title":"Non-working setups","text":"<p>TensorFlow for GPU at https://www.tensorflow.org/install/install_linux says:</p> <ul> <li>CUDA 9.0: http://docs.nvidia.com/cuda/cuda-installation-guide-linux/#axzz4VZnqTJ2A<ul> <li>Which recommends Drivers 390, with no GeForce 200 Series support (min GeForce 400 Series), but should support GeForce GTX 675M.</li> </ul> </li> <li>CUDA micro-arch 3.0 Kepler from source, or 3.5 Kepler for bin: GTX 260 is 1.3 Tesla, and GTX 675M is 2.1 Fermi.</li> </ul>"},{"location":"install-tensorflow_cc.html","title":"Install tensorflow_cc","text":"<p>We use <code>tensorflow_cc</code> for Tensorflow C++ API. Use <code>cmake</code> to build your project using <code>tensorflow_cc</code> as library. Official page: FloopCZ/tensorflow_cc</p> <p>Also see install-tensorflow for the official alternative (less prepared for use with CMake).</p>"},{"location":"install-tensorflow_cc.html#install-dependencies-ubuntu-1804","title":"Install dependencies (Ubuntu 18.04)","text":"<p>Download and install requirements.</p> <pre><code>sudo apt-get install build-essential curl git cmake unzip autoconf autogen automake libtool mlocate zlib1g-dev g++-7 python python3-numpy python3-dev python3-pip python3-wheel wget realpath\n</code></pre>"},{"location":"install-tensorflow_cc.html#install-dependencies-ubuntu-1404-and-1604","title":"Install dependencies (Ubuntu 14.04 and 16.04)","text":"<p>Download and install requirements. <pre><code>sudo apt-get install build-essential curl git cmake unzip autoconf autogen automake libtool mlocate zlib1g-dev python python3-numpy python3-dev python3-pip python3-wheel wget realpath\n</code></pre> Ubuntu 14.04 and 16.04 doesn\u00b4t allow GCC7 installation direcly, you should add <code>ubuntu-toolchain-r/test</code> repository to install.</p> <pre><code>sudo apt-get update -y &amp;&amp; \\\nsudo apt-get upgrade -y &amp;&amp; \\\nsudo apt-get dist-upgrade -y &amp;&amp; \\\nsudo apt-get install build-essential software-properties-common -y &amp;&amp; \\\nsudo add-apt-repository ppa:ubuntu-toolchain-r/test -y &amp;&amp; \\\nsudo apt-get update -y &amp;&amp; \\\nsudo apt-get install gcc-7 g++-7 -y &amp;&amp; \\\nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 --slave /usr/bin/g++ g++ /usr/bin/g++-7 &amp;&amp; \\\nsudo update-alternatives --config gcc\n</code></pre>"},{"location":"install-tensorflow_cc.html#install-tensorflow_cc-ubuntu","title":"Install tensorflow_cc (Ubuntu)","text":"<p>You can create two diferent types of libraries: Shared (recommended) or Static.</p>"},{"location":"install-tensorflow_cc.html#shared-library","title":"Shared library","text":"<p>Will create CMake target <code>tensorflow_cc::Shared</code>, which we use in roboticslab-uc3m/vision (recommended).</p> <ul> <li>Requires install bazel</li> <li>Slower to build</li> <li>GPU support</li> <li>Full Tensorflow C++ API</li> </ul> <p>Download and install: <pre><code>git clone https://github.com/FloopCZ/tensorflow_cc.git\ncd tensorflow_cc/tensorflow_cc\nmkdir build &amp;&amp; cd build\ncmake -DTENSORFLOW_STATIC=OFF -DTENSORFLOW_SHARED=ON ..\nmake # No need for -j$(nproc), bazel will use all CPUs anyway\nsudo make install\n</code></pre></p>"},{"location":"install-tensorflow_cc.html#static-library","title":"Static library","text":"<p>Will create CMake target <code>tensorflow_cc::Static</code>.</p> <ul> <li>Default</li> <li>Faster to build</li> <li>No GPU support</li> <li>Basic functionalities</li> </ul> <p>Download and install: <pre><code>git clone https://github.com/FloopCZ/tensorflow_cc.git\ncd tensorflow_cc/tensorflow_cc\nmkdir build &amp;&amp; cd build\ncmake ..\nmake -j$(nproc)\nsudo make install\n</code></pre></p>"},{"location":"install-tensorflow_cc.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"install-tensorflow_cc.html#note-for-intel-cpu-older-than-ivybridge","title":"Note for Intel CPU older than ivybridge","text":"<p>Intel CPU older than ivybridge: <pre><code>export CC_OPT_FLAGS=\"-march=native\"\n</code></pre></p>"},{"location":"install-tensorflow_cc.html#working-setups","title":"Working setups","text":"<p>Related: install-tensorflow#working-setups</p>"},{"location":"install-tensorflow_cc.html#tiago-entrenamiento","title":"tiago-entrenamiento","text":"<ul> <li>https://github.com/FloopCZ/tensorflow_cc/commit/18af480b99a9b5d07333fc7b6dfd4d3313fb6d0f</li> </ul>"},{"location":"install-tensorflow_cc.html#non-working-setups","title":"Non-working setups","text":"<p>Related: install-tensorflow#non-working-setups</p> <ul> <li>Careful with Bazel versions, e.g. Oct 23 2019 commit 4338525 specifies <code>0.26.1</code>.</li> </ul>"},{"location":"install-travislib.html","title":"Install Travis","text":"<p>This library is a wrapper of OpenCV hosted on GitHub.</p> <ul> <li>First install OpenCV.</li> </ul>"},{"location":"install-travislib.html#install-travis-ubuntu","title":"Install Travis (Ubuntu)","text":"<pre><code>git clone https://github.com/roboticslab-uc3m/travislib.git\ncd travislib/main; mkdir build; cd build\ncmake ..\nmake -j$(nproc)  # compile\nsudo make install; sudo ldconfig; cd  # install and go home\n</code></pre>"},{"location":"install-webots.html","title":"Install Webots","text":"<p>Official pages:</p> <ul> <li>https://cyberbotics.com</li> <li>https://cyberbotics.com/doc/guide/installation-procedure</li> <li>User guide: https://cyberbotics.com/doc/guide/index</li> <li>Reference manual: https://cyberbotics.com/doc/reference/index</li> </ul>"},{"location":"install-webots.html#install-webots-all-platforms","title":"Install Webots (all platforms)","text":"<p>Simply go to https://cyberbotics.com/#download and download your version.</p> <p>More versions can be found at https://github.com/cyberbotics/webots/releases (avoid nightly builds, go for stable releases named <code>R202Xx</code> which are best for users).</p>"},{"location":"install-webots.html#notes-on-programming-language-setup","title":"Notes on Programming Language Setup","text":"<ul> <li>https://cyberbotics.com/doc/guide/language-setup</li> </ul>"},{"location":"install-webots.html#notes-on-programming-language-setup-python","title":"Notes on Programming Language Setup: Python","text":"<ul> <li>https://cyberbotics.com/doc/guide/using-python</li> </ul> <p>At least since <code>R2020a</code>, requires <code>Python &gt;= 3.7</code>.</p>"},{"location":"install-webots.html#notes-on-programming-language-setup-matlab","title":"Notes on Programming Language Setup: MATLAB","text":"<ul> <li>https://cyberbotics.com/doc/guide/using-matlab</li> </ul> <p>Requires a functional instalation of MATLAB.</p>"},{"location":"install-webots.html#additional-information","title":"Additional Information","text":""},{"location":"install-webots.html#changes-between-revisions","title":"Changes between revisions","text":"<ul> <li>Upgrade from R2023a to R2023b: No relevant changes</li> <li>Upgrade from R2022a to R2022b: EXTERNPROTO</li> <li>Upgrade from R2021b to R2022a: Changes in orientation</li> </ul>"},{"location":"install-webots.html#similar-and-related","title":"Similar and Related","text":"<ul> <li>https://github.com/roboticslab-uc3m?q=webots (roboticslab-uc3m)</li> </ul>"},{"location":"install-xsens.html","title":"Install XSENS","text":"<p>Download, compile and install XSENS YARP device from <code>icub-main</code> repository. <pre><code>sudo apt install libgsl0-dev  # Seems to be hard dependency\ncd  # go home\nmkdir -p repos; cd repos  # make $HOME/repos if it doesn't exist; then, enter it\ngit clone https://github.com/robotology/icub-main\ncd icub-main &amp;&amp; mkdir build &amp;&amp; cd build\ncmake ..  -DENABLE_icubmod_xsensmtx=ON  # Configure the icub-main software\nmake -j$(nproc)  # compile\nsudo make install\nsudo ldconfig\n</code></pre></p> <p>Check installation: <pre><code>yarpdev --list | grep xsensmtx\n</code></pre></p>"},{"location":"install-xsens.html#set-rules-to-avoid-needing-sudo","title":"Set rules to avoid needing sudo","text":"<p>In order to allow a non-sudoer to read data from the sensors connected via USB port, you need to add a rule for udev system.</p> <p>Similar to the advice from debian udev documentation, create <code>/etc/udev/rules.d/80-persistent-local-usb.rules</code> with the following contents: <pre><code>KERNEL\u00a0==\u00a0\"ttyUSB0\",\u00a0MODE\u00a0=\u00a0\"0777\"\n</code></pre></p>"},{"location":"install-xsens.html#view-xsens-data","title":"View XSENS data","text":"<p>Run (may require <code>sudo</code> if rules not set): <pre><code>yarpdev --device deviceBundler --wrapper_device multipleanalogsensorsserver --attached_device xsensmtx --name /inertial --period 5\n</code></pre></p> <p>Data can be vizualized via classic <code>yarp read ... /inertial</code> or like in teoTools.xml.</p>"},{"location":"install-xwiimote.html","title":"Install XWiimote","text":"<p>We use XWiimote for interfacing with the Wiimote (Wii controller).</p> <p>Linux device driver and utilities: link. Wiki page: link.</p>"},{"location":"install-xwiimote.html#install-xwiimote-ubuntu","title":"Install XWiimote (Ubuntu)","text":"<pre><code>sudo apt install libxwiimote-dev\n</code></pre> <p>To get the <code>xwiishow</code> tool (handy <code>ncurses</code>-based GUI for testing):</p> <pre><code>sudo apt install xwiimote\n</code></pre>"},{"location":"install-yarp.html","title":"Install YARP","text":"<p>We use YARP for communications. Official pages:</p> <ul> <li>https://www.yarp.it</li> <li>https://www.yarp.it/latest/yarp_installation.html</li> <li>YARP Supported Distributions</li> <li>Also check out issue that tracks external devices: https://github.com/robotology/yarp/issues/2372</li> </ul> <p>Legacy documentation regarding YARP installations can be found at: (Legacy) Install YARP</p>"},{"location":"install-yarp.html#install-yarp-34-ubuntu-2004-focal","title":"Install YARP 3.4 (Ubuntu 20.04 Focal)","text":"<p>Install Dependencies that must be installed for compilation:</p> <ul> <li>Install CMake 3.12+</li> <li>Install YCM 0.11+</li> </ul> <p>Then, installing YARP on Ubuntu is quite straightforward.</p> <p>Note that you will be prompted for your password upon using <code>sudo</code> a couple of times.</p> <p>As can be seen, here we are accounting for YARP GUIs and <code>mjpeg</code> carrier.</p> <pre><code>sudo apt install build-essential git\nsudo apt install libeigen3-dev # Needed for creating YARP lib_math used for kinematics, etc.\nsudo apt install qtbase5-dev qtdeclarative5-dev qtmultimedia5-dev \\\n  qml-module-qtquick2 qml-module-qtquick-window2 \\\n  qml-module-qtmultimedia qml-module-qtquick-dialogs \\\n  qml-module-qtquick-controls qml-module-qt-labs-folderlistmodel \\\n  qml-module-qt-labs-settings # GUI stuff, Ubuntu 16.04+ (Xenial)\nsudo apt install libjpeg8-dev # Needed for mjpeg carrier\nsudo apt install libedit-dev # Enables keyboard arrow keys within an RPC communication channel via terminal\nmkdir -p ~/repos; cd ~/repos # Create $HOME/repos if it doesn't exist; then, enter it\ngit clone --branch=yarp-3.4 https://github.com/robotology/yarp\ncd yarp &amp;&amp; mkdir build &amp;&amp; cd build\ncmake .. -DSKIP_ACE=ON -DCREATE_GUIS=ON -DENABLE_yarpcar_mjpeg=ON -DENABLE_yarpcar_depthimage=ON -DENABLE_yarpcar_depthimage2=ON\nmake -j$(nproc) # Compile\nsudo make install &amp;&amp; sudo ldconfig &amp;&amp; cd # Install and go home\n</code></pre> <p>For additional options use <code>ccmake</code> instead of <code>cmake</code>.</p>"},{"location":"install-yarp.html#install-yarp-33-ubuntu-1804-bionic","title":"Install YARP 3.3 (Ubuntu 18.04 Bionic)","text":"<p>Install Dependencies that must be installed for compilation:</p> <ul> <li>Install CMake 3.12+</li> </ul> <p>Then, installing YARP on Ubuntu is quite straightforward.</p> <p>Note that you will be prompted for your password upon using <code>sudo</code> a couple of times.</p> <p>As can be seen, here we are accounting for YARP GUIs and <code>mjpeg</code> carrier.</p> <pre><code>sudo apt install build-essential git\nsudo apt install libeigen3-dev # Needed for creating YARP lib_math used for kinematics, etc.\nsudo apt install qtbase5-dev qtdeclarative5-dev qtmultimedia5-dev \\\n  qml-module-qtquick2 qml-module-qtquick-window2 \\\n  qml-module-qtmultimedia qml-module-qtquick-dialogs \\\n  qml-module-qtquick-controls qml-module-qt-labs-folderlistmodel \\\n  qml-module-qt-labs-settings # GUI stuff, Ubuntu 16.04+ (Xenial)\nsudo apt install libjpeg8-dev # Needed for mjpeg carrier\nsudo apt install libedit-dev # Enables keyboard arrow keys within an RPC communication channel via terminal\nmkdir -p ~/repos; cd ~/repos # Create $HOME/repos if it doesn't exist; then, enter it\ngit clone --branch=yarp-3.3 https://github.com/robotology/yarp\ncd yarp &amp;&amp; mkdir build &amp;&amp; cd build\ncmake .. -DSKIP_ACE=ON -DCREATE_GUIS=ON -DENABLE_yarpcar_mjpeg=ON -DENABLE_yarpcar_depthimage=ON -DENABLE_yarpcar_depthimage2=ON\nmake -j$(nproc) # Compile\nsudo make install &amp;&amp; sudo ldconfig &amp;&amp; cd # Install and go home\n</code></pre> <p>For additional options use <code>ccmake</code> instead of <code>cmake</code>.</p> <p>To enable yarp auto-completion (do not do this for YARP 3.4+, as it has been moved to <code>data/bash-completion/yarp</code> and installed by default):</p> <pre><code>source ~/repos/yarp/scripts/yarp_completion # Activate in current bash session\necho \"source ~/repos/yarp/scripts/yarp_completion\" &gt;&gt; ~/.bashrc # Activate in future bash sessions\n</code></pre>"},{"location":"install-yarp.html#note-for-linux-mint-183-sylvia","title":"Note for Linux Mint 18.3 Sylvia","text":"<p>(tested on 64-bit XFCE desktop)</p> <pre><code>sudo apt install libqt5opengl5-dev # Avoid error on yarpmanager/builder GUI\nsudo apt-get install qml-module-qt-labs-settings qml-module-qt-labs-folderlistmodel # Fix QQmlApplicationEngine failed to load component\n</code></pre>"},{"location":"install-yarp.html#install-yarp-windows","title":"Install YARP (Windows)","text":"<p>Binary releases usually work well: http://www.yarp.it/download.html</p>"},{"location":"install-yarp.html#install-additional-plugins-carriers","title":"Install Additional Plugins: Carriers","text":""},{"location":"install-yarp.html#install-ros-support","title":"Install ROS support","text":"<p>Note: these carriers are now installed by default, ignore this if you are using YARP 3.x.x</p> <p>Make sure you have installed previously YARP and that the ROS environment is not sourced, as it causes the build to fail. If you have the line <code>source /opt/ros/indigo/setup.bash</code> at the end of ~/.bashrc, comment it, save the file and open a new terminal.</p> <pre><code>cd ~/repos/yarp/build\ncmake .. -DCREATE_OPTIONAL_CARRIERS=ON -DENABLE_yarpcar_tcpros=ON -DENABLE_yarpcar_xmlrpc=ON\nmake -j$(nproc) # Compile\nsudo make install &amp;&amp; sudo ldconfig &amp;&amp; cd # Install and go home\n</code></pre>"},{"location":"install-yarp.html#install-additional-plugins-devices","title":"Install Additional Plugins: Devices","text":""},{"location":"install-yarp.html#install-additional-yarp-device-depthcamera-ubuntu","title":"Install additional YARP device: depthCamera (Ubuntu)","text":"<p>Make sure you have previously installed YARP and:</p> <ul> <li>Install OpenNI2 (Ubuntu)</li> </ul> <pre><code>cd ~/repos/yarp/build\ncmake .. -DOpenNI2_INCLUDE_DIR=/usr/local/include/OpenNI2/ -DOpenNI2_LIBRARY=/usr/local/lib/libOpenNI2.so -DENABLE_yarpmod_depthCamera=ON\nmake -j$(nproc) # Compile\nsudo make install &amp;&amp; sudo ldconfig &amp;&amp; cd # Install and go home\n</code></pre> <p>You'll need a configuration file in order to launch this device. For instance, we use this command with an ASUS camera: <code>yarpdev --context sensors --from asus-xtion.ini</code> (ref).</p> <p>Note (ref): installation of depthCamera is broken at YARP 2.3.72 (and probably at 2.3.70.x, too). Did work at 2.3.68.x, fixed upstream at 2.3.72.1. Workaround: do <code>cmake . -DYARP_HAS_OpenNI2=ON</code> and configure again.</p>"},{"location":"install-yarp.html#install-bindings","title":"Install Bindings","text":"<p>Swig is needed in order to build all language bindings. Refer to Install SWIG.</p>"},{"location":"install-yarp.html#install-python-bindings","title":"Install Python bindings","text":"<p>Make sure you have previously installed YARP and:</p> <pre><code>sudo apt update\nsudo apt install libpython-dev # Python development package are not installed by default on clean distros\ncd ~/repos/yarp/build\ncmake .. -DYARP_COMPILE_BINDINGS=ON -DCREATE_PYTHON=ON\nmake -j$(nproc)  # compile\nsudo make install &amp;&amp; sudo ldconfig &amp;&amp; cd # Install and go home\n</code></pre>"},{"location":"install-yarp.html#install-python-bindings-checking","title":"Install Python bindings (checking)","text":"<p>Check your installation via (should output nothing; if bad you will see a ModuleNotFoundError):</p> <pre><code>python -c \"import yarp\"\n</code></pre> <p>Depending on your configuration, you might need to use <code>python3</code> (or <code>python2</code>) instead of <code>python</code>.</p>"},{"location":"install-yarp.html#install-python-bindings-troubleshooting","title":"Install Python bindings (troubleshooting)","text":"<p>Mind that, starting from YARP 3.4, support for Python 2.x has been dropped.</p> <p>You can use the CMake variable <code>CMAKE_INSTALL_PYTHON3DIR</code> to select the most adequate location for the installed module (in YARP 3.3 and earlier, use <code>CMAKE_INSTALL_PYTHONDIR</code> along with <code>YARP_USE_PYTHON_VERSION</code>, more details below). This is useful in case the interpreter is unable to find it (see previous section). For instance, you can end up with the YARP module installed in <code>lib/python3/</code>, whereas standard Python module path might be <code>lib/python3.6/</code> (this has been observed on Ubuntu Bionic and Focal). For this specific scenario:</p> <pre><code>cmake -DYARP_COMPILE_BINDINGS=ON -DCREATE_PYTHON=ON -DCMAKE_INSTALL_PYTHON3DIR:PATH=lib/python3.6/dist-packages ..\n</code></pre> <p>Don't omit the <code>:PATH</code>!</p> <p>Extra care should be taken with multiple Python versions (e.g. 2.x vs 3.x) in earlier YARP releases. Use <code>YARP_USE_PYTHON_VERSION</code> to select the desired version. The following command has been tested on Ubuntu Xenial to force Python 3.5m (note distro version is 3.5m, where <code>m</code> is <code>--with-pymalloc</code>; ref):</p> <pre><code>sudo apt install libpython3-dev\ncmake -DYARP_COMPILE_BINDINGS=ON -DCREATE_PYTHON=ON -DYARP_USE_PYTHON_VERSION=3.5 -DPYTHON_INCLUDE_DIR=/usr/include/python3.5m -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.5m.so -DCMAKE_INSTALL_PYTHONDIR:PATH=lib/python3.5/dist-packages -DPYTHON_EXECUTABLE=/usr/bin/python3 ..\n</code></pre> <p>Prior to YARP 3.4 the <code>CMAKE_INSTALL_PYTHONDIR</code> option might be ignored, therefore we suggest to create symlinks. Use <code>python -c \"import site; print(site.getsitepackages()[0])\"</code> to retrieve a list of possible destinations of Python modules, ideally the first element would be good enough for your needs. Then:</p> <pre><code>sudo ln -s /usr/local/lib/python3/dist-packages/_yarp.so `python -c \"import site; print(site.getsitepackages()[0])\"`\nsudo ln -s /usr/local/lib/python3/dist-packages/yarp.py `python -c \"import site; print(site.getsitepackages()[0])\"`\n</code></pre> <p>Specifically for Python 3.5m, this may expand to:</p> <pre><code>sudo ln -s /usr/local/lib/python3/dist-packages/_yarp.so /usr/local/lib/python3.5/dist-packages/\nsudo ln -s /usr/local/lib/python3/dist-packages/yarp.py /usr/local/lib/python3.5/dist-packages/\n</code></pre>"},{"location":"install-yarp.html#install-java-bindings","title":"Install Java bindings","text":"<p>First, install the Java JDK. There are several versions at hand, so make sure you pick the Java release you are later going to work with in your applications.</p> <p>Make sure you have previously installed YARP and:</p> <pre><code>sudo apt update\nsudo apt install openjdk-8-jdk  # on Trusty, use openjdk-7-jdk\ncd ~/repos/yarp/build\ncmake .. -DYARP_COMPILE_BINDINGS=ON -DCREATE_JAVA=ON\nsudo make install; sudo ldconfig; cd  # install and go home\n</code></pre>"},{"location":"install-yarp.html#install-java-bindings-troubleshooting","title":"Install Java bindings (troubleshooting)","text":"<p>In case you run into trouble because of CMake not finding Java paths, we'll define here a variable that may hold different values depending on the system you are working on, and use it later. As a prerequisite, inspect the usual JVM installation path with <code>ls /usr/lib/jvm</code>.</p> <p>On Ubuntu 16.04 64 bits, you should see a <code>java-1.8.0-openjdk-amd64</code> directory symlink. Store its location in a new environment variable:</p> <pre><code>JAVA_JVM_PATH=/usr/lib/jvm/java-1.8.0-openjdk-amd64\n</code></pre> <p>On different installations, the path will look differently. Adjust the variable to your needs, or use the following script to handle this for you:</p> <pre><code>JAVA_JVM_PATH=$(find /usr/lib/jvm/ -name java-1.*.*-openjdk* -type l | head -n 1)\n</code></pre> <p>Now, run the CMake command again and proceed with the installation:</p> <pre><code>cd ~/repos/yarp/build\ncmake .. -DJAVA_AWT_INCLUDE_PATH=$JAVA_JVM_PATH/include -DJAVA_AWT_LIBRARY=$JAVA_JVM_PATH/include/jawt.h -DJAVA_INCLUDE_PATH=$JAVA_JVM_PATH/include -DJAVA_INCLUDE_PATH2=$JAVA_JVM_PATH/include/linux -DJAVA_JVM_LIBRARY=$JAVA_JVM_PATH/include/jni.h\nsudo make install &amp;&amp; sudo ldconfig &amp;&amp; cd  # Install and go home\n</code></pre> <p>You might need to set the <code>CLASSPATH</code> and <code>LD_LIBRARY_PATH</code> variables prior to calling YARP bindings in your application in order to find the generated <code>*.jar</code> and <code>*.so</code> files, respectively.</p>"},{"location":"install-yarp.html#install-matlab-bindings","title":"Install MATLAB bindings","text":"<p>Two options here:</p> <ol> <li>Classical way via Java bindings, which is similar to Python, then setting the <code>classpath.txt</code> and <code>librarypath.txt</code> files contained within MATLAB. Ref: http://wiki.icub.org/wiki/Calling_yarp_from_Matlab Working setups on  Windows 10 (more complex than Ubuntu):<ul> <li>Good 64 bit: <code>MATLAB R2017b (9.3, 64 bit)</code> + <code>yarp_2.3.70_v14_x86_amd64_1.exe</code> + <code>cmake 3.9.4</code> + <code>VS 15 2017</code> + <code>jdk-8u162-windows-x64.exe</code> working nicely, only having to install <code>things.i</code> manually (see https://github.com/robotology/yarp/issues/698) and doing <code>javac -source 1.6 -target 1.6 *.java</code> (which is the default in code, but must be done manually, and manual says 1.3).</li> <li>Good 64 bit (portable): To avoid installing VS + JDK + CMake, here we've put together some pre-compiled YARP bindings (note <code>vc_redist.x64.exe</code> to compensate the lack of VS, and forced us to compile bindings in <code>Release</code> not <code>Debug</code>).</li> <li>Ye-oldie 32 bit: <code>MATLAB R2015b (8.6, 32 bit) + yarp_2.3.70_v14_x86_1.exe + cmake 3.9.4 + VS 15 2017 + jdk-8u152-windows-i586.exe + MATLAB R2015b (8.6 32 bit)</code> working nicely, only having to install <code>things.i</code> manually (see https://github.com/robotology/yarp/issues/698) and doing <code>javac -source 1.3 -target 1.3 *.java</code> with <code>1.5</code> instead.</li> </ul> </li> <li>A different method: New repo directly against MATLAB: yarp-matlab-bindings. Some issues:  \u00a0   - Requires setting variables such as <code>YARP_DIR</code> and even <code>YCM_DIR</code>.<ul> <li>This seems to imply a separately built YCM, but see this issue.  \u00a0   - It links against MATLAB libs, so you must match compiler in addition to bits (Windows MATLAB 2017b only provides 64-bit mingw version).</li> </ul> </li> </ol>"},{"location":"install-yarp.html#additional-information","title":"Additional Information","text":""},{"location":"install-yarp.html#tutorials-and-examples","title":"Tutorials and Examples","text":"<ul> <li>Tutorials<ul> <li>YARP Tutorial (Spanish) (perma)</li> <li>YARP Devices Tutorial (Spanish)</li> <li>https://github.com/s4hri/yarp-python-tutorials</li> </ul> </li> <li>Recommendations<ul> <li>Programming with YARP (perma)</li> </ul> </li> <li>Hacks and tricks<ul> <li>YARP Tricks (perma)</li> <li>http://wiki.icub.org/wiki/YarpTricks</li> </ul> </li> <li>Examples<ul> <li>https://github.com/robotology/yarp/tree/master/example (perma) (official, C++)</li> <li>https://github.com/robotology/yarp/tree/master/bindings (perma) (official)</li> <li>https://github.com/roboticslab-uc3m/yarp-devices/tree/master/examples (perma) (roboticslab-uc3m)</li> </ul> </li> </ul>"},{"location":"install-yarp.html#similar-and-related","title":"Similar and Related","text":"<ul> <li>https://github.com/robotology?q=yarp (org of official repo)</li> <li>https://github.com/roboticslab-uc3m?q=yarp (roboticslab-uc3m)</li> <li>https://github.com/inria-larsen?q=yarp</li> </ul>"},{"location":"install-yarp.html#docker","title":"Docker","text":"<ul> <li>https://github.com/roboticslab-uc3m/teo-demos-misc/pkgs/container/teo-demos-misc -&gt; <code>ghcr.io/roboticslab-uc3m/teo-demos-misc:latest</code></li> <li>https://github.com/orgs/robotology/discussions/660</li> <li>https://hub.docker.com/search?q=yarp&amp;type=image (avoid <code>yarpc</code> which is unrelated)</li> <li>https://hub.docker.com/r/h2020infuse/yarpmonitor-ubuntu-prod</li> </ul>"},{"location":"install-ycm.html","title":"Install YCM","text":"<p>We use YCM to benefit from additional CMake modules and superbuild support. The source code is hosted on GitHub at robotology/ycm. Due to its nature, you may want to install it on your system (as a so-called hard dependency) or lazy-load on demand (soft dependency).</p>"},{"location":"install-ycm.html#install-dependencies","title":"Install Dependencies","text":"<p>Install dependencies that must be installed for compilation:</p> <ul> <li>Install CMake<ul> <li>YCM releases require CMake 3.5+ since YCM 0.8</li> </ul> </li> </ul>"},{"location":"install-ycm.html#install-ycm-ubuntu-hard-dependency","title":"Install YCM (Ubuntu) - hard dependency","text":"<p>Note that you will be prompted for your password upon using <code>sudo</code>. Type:</p> <pre><code>cd  # go home\nmkdir -p repos &amp;&amp; cd repos  # create $HOME/repos if it doesn't exist; then, enter it\ngit clone https://github.com/robotology/ycm  # clone repository\nmkdir -p ycm/build &amp;&amp; cd ycm/build &amp;&amp; cmake ..  # configure\nmake -j$(nproc)  # download external modules\nsudo make install &amp;&amp; cd  # install and go home\n</code></pre>"},{"location":"install-ycm.html#include-ycm-in-cmake-project-soft-dependency","title":"Include YCM in CMake project - soft dependency","text":"<p>CMake-based projects may bootstrap YCM so that its sources are downloaded on demand - it's up to the developers to reflect this in the documentation. Under these assumptions, you should not worry about the previous installation step as everything would land in your project's <code>&lt;build-tree&gt;/install</code> directory by default. However, you may want to avoid this process (and the subsequent need for Internet connection) by installing YCM in your system paths - in this respect, please refer to the previous section. Additionally, it must be noted that bootstrapping YCM itself as well as downloading any remote package integrated in the superbuild requires that an appropriate VCS client is installed on the system. Usually, these projects are Git-based and all you need to do is to install <code>git</code> (we assume you did this already):</p> <pre><code>sudo apt install git\n</code></pre> <p>Remember to configure your Git username and email (YCM and Git).</p>"},{"location":"install-ycm.html#ycm-and-git","title":"YCM and Git","text":"<p>Apart from installing Git, YCM requires that you set your username and e-mail. Type the following commands anywhere, filling the corresponding fields:</p> <pre><code>git config --global user.name \"My Username\"\ngit config --global user.email \"user@example.com\"\n</code></pre> <p>You may set these values on a per-repository basis. In order to achieve that, browse to the root directory of the desired repo and type the previous commands, replacing <code>--global</code> with <code>--local</code>.</p>"},{"location":"install-ycm.html#ycm-and-openssl","title":"YCM and OpenSSL","text":"<p>During its build phase, YCM expects that CMake offers support for the <code>https://</code> protocol. Older CMake releases and locally built instances may lack this, see OpenSSL support.</p>"},{"location":"legacy/legacy-install-cmake.html","title":"(Legacy) Install CMake","text":"<p>This is Legacy documentation regarding CMake installations. Updated CMake installation at: Install CMake</p>"},{"location":"legacy/legacy-install-cmake.html#install-cmake-ubuntu-1604-xenial","title":"Install CMake (Ubuntu 16.04 Xenial)","text":"<p>The latest CMake release is available via Kitware's PPA:</p> <pre><code>wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2&gt;/dev/null | sudo apt-key add -\n</code></pre> <pre><code>sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ xenial main'\nsudo apt-get update\n</code></pre> <p>Then, download and install CMake:</p> <pre><code>sudo apt install cmake\nsudo apt install cmake-curses-gui  # Recommended, includes ccmake.\n</code></pre>"},{"location":"legacy/legacy-install-cmake.html#install-cmake-backports-ubuntu-1404-trusty","title":"Install CMake backports (Ubuntu 14.04 Trusty)","text":"<p>CMake packages up to release 2.8.12 are distributed on Ubuntu Trusty (14.04). However, a CMake 3.5 backport is also included in the oficial repositories. Skip adding other repositories and simply:</p> <pre><code>sudo apt update\nsudo apt install cmake3\nsudo apt install cmake3-curses-gui  # Recommended, includes ccmake\n</code></pre>"},{"location":"legacy/legacy-install-cmake.html#install-cmake-backports-ubuntu-1204-precise","title":"Install CMake backports (Ubuntu 12.04 Precise)","text":"<p>CMake packages up to release 2.8.7 are distributed on Ubuntu precise (12.04). However, you can pull and install CMake 2.8.11.2 from an additional repository:</p> <pre><code>sudo add-apt-repository ppa:kalakris/cmake\nsudo apt-get update\nsudo apt-get install cmake\n</code></pre>"},{"location":"legacy/legacy-install-cmake.html#openssl-support-older-distros-and-building-from-sources","title":"OpenSSL support (older distros and building from sources)","text":"<p>OpenSSL support is required to download external data through the <code>file(DOWNLOAD)</code> command when a secure protocol is requested (e.g. <code>https://</code>). Unsupported protocol errors as described in this issue may arise when CMake was built from source without having set the appropriate options, also apt packages for older distros (such as Ubuntu 12.04) could lack this feature. For CMake 2.8.9 on Ubuntu 12.04:</p> <pre><code>sudo apt install cmake # get CMake 2.8.7 first\nsudo apt install libcurl4-openssl-dev\ncd &amp;&amp; mkdir -p repos &amp;&amp; cd repos\ngit clone https://github.com/kitware/cmake\ncd cmake\ngit checkout tags/v2.8.9\nmkdir build &amp;&amp; cd build\ncmake .. -DCMAKE_USE_SYSTEM_CURL:BOOL=ON -DCMAKE_USE_OPENSSL:BOOL=ON\nmake -j$(nproc)\nsudo make install\nhash -r # rebuild executable cache to use new 'cmake' (2.8.9) command\n</code></pre>"},{"location":"legacy/legacy-install-openai-gym.html","title":"(Legacy) Install OpenAI Gym","text":"<p>This is Legacy documentation regarding OpenAI Gym installations. Updated Gymnasium installation at: Install Gymnasium</p> <p>Official page: link. Official install: link and link.</p>"},{"location":"legacy/legacy-install-openai-gym.html#install-openai-gym-ubuntu","title":"Install OpenAI Gym (Ubuntu)","text":"<pre><code>sudo -H pip install gym\n</code></pre>"},{"location":"legacy/legacy-install-openai-gym.html#enable-box2d-simulations","title":"Enable Box2D Simulations","text":"<p>You'll need pybox2d for the Box2D Simulations. Gym <code>0.10.11</code> works well with Box2D <code>2.3.2</code>. On Ubuntu 16.04 Xenial, as seen here, you'll get a lower version via <code>apt</code> package. Thus, better to install via <code>pip</code>:</p> <ul> <li>Install SWIG <pre><code>sudo -H pip install Box2D\n</code></pre></li> </ul>"},{"location":"legacy/legacy-install-openai-gym.html#enable-atari-simulations","title":"Enable Atari Simulations","text":"<p>You'll need this for the Atari Simulations. <pre><code>sudo -H pip install gym[atari]\n</code></pre></p>"},{"location":"legacy/legacy-install-openai-gym.html#enable-mujoco-and-robotics-simulations","title":"Enable MuJoCo and Robotics Simulations","text":"<p>You'll need this for the MuJoCo Simulations and Robotics Simulations. Link: https://github.com/openai/mujoco-py/</p>"},{"location":"legacy/legacy-install-openai-gym.html#enable-pybullet-simulations","title":"Enable PyBullet Simulations","text":"<p>The downside to MuJoCo and Robotics are the license issues. However, you can get simulations that are very similar at https://github.com/openai/gym/blob/master/docs/environments.md#pybullet-robotics-environments. Installation should be straightforward, obtaining <code>pybullet_envs</code> rather effortlessly: <pre><code>sudo -H pip install pybullet\n</code></pre></p>"},{"location":"legacy/legacy-install-openrave.html","title":"(Legacy) Install OpenRAVE","text":"<p>This is Legacy documentation regarding OpenRAVE installations. Updated OpenRAVE installation at: Install OpenRAVE</p>"},{"location":"legacy/legacy-install-openrave.html#install-openrave-090-ubuntu-1804-bionic","title":"Install OpenRAVE 0.9.0 (Ubuntu 18.04 Bionic)","text":"<p>No official PPA, install from source. Install dependencies that must be installed for compilation:</p> <ul> <li>Install CMake</li> </ul> <p>Note that you will be prompted for your password upon using <code>sudo</code>.</p> <pre><code>sudo apt install git # probably already installed\nsudo apt install libboost-filesystem-dev libboost-system-dev libboost-python-dev libboost-thread-dev libboost-iostreams-dev libboost-numpy-dev\nsudo apt install libqt4-dev qt4-dev-tools libxml2-dev libode-dev\nsudo apt install libsoqt4-dev libcoin80-dev\nsudo apt install rapidjson-dev liblapack-dev\n# sudo apt install python-scipy  # For openravepy. Note that 16.04 Xenial sympy is 0.7.6, see next line\n# pip install --upgrade --user sympy==0.7.1 # OpenRAVE ikfast needs sympy 0.7.1, https://github.com/rdiankov/openrave/pull/407\nsudo apt install libcollada-dom2.4-dp-dev  # Open .zae files, avoid cmake 3.19 error on 18.04 Bionic\ncd  # go home\nmkdir -p repos; cd repos  # create $HOME/repos if it doesn't exist; then, enter it\ngit clone --branch boost-1.6x-forcompile https://github.com/roboticslab-uc3m/openrave.git # git clone --branch master https://github.com/rdiankov/openrave.git\ncd openrave; mkdir build; cd build\ncmake .. -DOPT_VIDEORECORDING=OFF  # Avoids AV errors\nmake -j$(nproc)\nsudo make install; cd  # install and go home\n</code></pre>"},{"location":"legacy/legacy-install-openrave.html#known-issues-ubuntu-1804-bionic","title":"Known Issues (Ubuntu 18.04 Bionic)","text":"<ul> <li>In case you run into <code>non-constant-expression cannot be narrowed from type 'double' to 'float' in initializer list [-Wc++11-narrowing]</code> errors (happened on OpenRAVE 0.15 and a Clang 6.0.0/7.0.0 compiler), reconfigure CMake with the following option: <code>cmake .. -DOPT_IKFAST_FLOAT32=OFF</code></li> </ul>"},{"location":"legacy/legacy-install-openrave.html#install-openrave-090-ubuntu-1604-xenial-and-1404-trusty","title":"Install OpenRAVE 0.9.0 (Ubuntu 16.04 Xenial and 14.04 Trusty)","text":"<p>No official PPA, install from source. Install Dependencies that must be installed for compilation:</p> <ul> <li>CMake</li> </ul> <p>Note that you will be prompted for your password upon using <code>sudo</code>.</p> <pre><code>sudo apt install git\nsudo apt install libboost-filesystem-dev libboost-system-dev libboost-python-dev libboost-thread-dev libboost-iostreams-dev libboost-date-time-dev\nsudo apt install libqt4-dev qt4-dev-tools libxml2-dev libode-dev\nsudo apt install libsoqt4-dev libcoin80-dev\nsudo apt install python-scipy  # For openravepy. Note that Xenial sympy is 0.7.6, see next line\npip install --upgrade --user sympy==0.7.1 # OpenRAVE ikfast needs sympy 0.7.1, https://github.com/rdiankov/openrave/pull/407\nsudo apt install libcollada-dom2.4-dp-dev  # Open .zae files, only Ubuntu 16.04\ncd  # go home\nmkdir -p repos; cd repos  # create $HOME/repos if it doesn't exist; then, enter it\ngit clone --branch v0.9.0 https://github.com/rdiankov/openrave.git\ncd openrave; mkdir build; cd build\ncmake .. -DOPT_VIDEORECORDING=OFF  # Avoids AV errors\nmake -j$(nproc)\nsudo make install; cd  # install and go home\n</code></pre> <p>Note that you may end up requiring over 2 GB of free space during the installation of <code>apt</code> dependencies. To avoid that, use the <code>--no-install-recommends</code> option as in:</p> <pre><code>sudo apt install --no-install-recommends package\n</code></pre> <p>Thus, <code>apt</code> would not try to install non-critical packages marked as recommended by the dependencies of OpenRAVE.</p>"},{"location":"legacy/legacy-install-openrave.html#known-issues-ubuntu-1604-xenial","title":"Known Issues (Ubuntu 16.04 Xenial)","text":"<ul> <li>OpenRAVE 0.9.0 with <code>gcc-7</code> fails to compile. Recommendation: switch back to <code>gcc-5 (Ubuntu 5.5.0-12ubuntu1~16.04) 5.5.0 20171010</code>.</li> </ul>"},{"location":"legacy/legacy-install-openrave.html#fcl-known-issues-ubuntu-1604-xenial","title":"FCL Known Issues (Ubuntu 16.04 Xenial)","text":"<p>With the Cannonical PPA way, you'll run into:</p> <pre><code>-- Checking for module 'fcl'\n--   Found fcl, version 0.3.2\n-- Could not find FCL. Please install FCL (https://github.com/flexible-collision-library/fcl)\n</code></pre> <p>FCL <code>0.5.0</code> has been identified as working. Compile and install it via:</p> <pre><code>mkdir -p repos; cd repos # create $HOME/repos if it doesn't exist; then, enter it\ngit clone --branch 0.5.0 https://github.com/flexible-collision-library/fcl\ncd fcl; mkdir build; cd build\ncmake ..\nmake -j$(nproc)\nsudo make install; cd  # install and go home\n</code></pre>"},{"location":"legacy/legacy-install-openrave.html#install-openrave-ubuntu-1204-precise","title":"Install OpenRAVE (Ubuntu 12.04 Precise)","text":"<p>To install a precompiled version of OpenRAVE, type:</p> <pre><code>sudo add-apt-repository ppa:openrave/release\nsudo apt-get update\nsudo apt-get install openrave\n</code></pre>"},{"location":"legacy/legacy-install-openrave.html#install-openrave-windows","title":"Install OpenRAVE (Windows)","text":"<p>Long ago, this was easy. Now, installers such as <code>openrave-0.9.0-5cfc74-win32-vc100-setup</code> are broken (due to broken Boost 1.44 and Qt links, as well as old Visual Studio version), so we have to go old-school.</p> <p>References:</p> <ul> <li>http://robots.uc3m.es/index.php/OpenRAVE_R1457_Windows_Install</li> <li>https://www.cs.cmu.edu/~motionplanning/homework/hw1/hw1.html</li> <li>http://openrave.org/docs/latest_stable/coreapihtml/installation_windows.html</li> <li>http://sukhoy.public.iastate.edu/openrave/</li> <li>https://github.com/rdiankov/openrave</li> </ul>"},{"location":"legacy/legacy-install-yarp.html","title":"(Legacy) Install YARP","text":"<p>This is Legacy documentation regarding YARP installations. Updated YARP installation at: Install YARP</p>"},{"location":"legacy/legacy-install-yarp.html#install-yarp-ubuntu-1604-xenial","title":"Install YARP (Ubuntu 16.04 Xenial)","text":"<p>Install Dependencies that must be installed for compilation:</p> <ul> <li>Install CMake 3.12+</li> </ul> <p>Then, installing YARP on Ubuntu is quite straightforward.</p> <p>Note that you will be prompted for your password upon using <code>sudo</code> a couple of times.</p> <p>As can be seen, here we are accounting for YARP GUIs and <code>mjpeg</code> carrier.</p> <pre><code>sudo apt install build-essential git\nsudo apt install libeigen3-dev # Needed for creating YARP lib_math used for kinematics, etc.\nsudo apt install qtbase5-dev qtdeclarative5-dev qtmultimedia5-dev \\\n  qml-module-qtquick2 qml-module-qtquick-window2 \\\n  qml-module-qtmultimedia qml-module-qtquick-dialogs \\\n  qml-module-qtquick-controls qml-module-qt-labs-folderlistmodel \\\n  qml-module-qt-labs-settings # GUI stuff, Ubuntu 16.04+ (Xenial)\nsudo apt install libjpeg8-dev # Needed for mjpeg carrier\nsudo apt install libedit-dev # Enables keyboard arrow keys within an RPC communication channel via terminal\nmkdir -p ~/repos; cd ~/repos # Create $HOME/repos if it doesn't exist; then, enter it\ngit clone --branch=yarp-3.3 https://github.com/robotology/yarp\ncd yarp &amp;&amp; mkdir build &amp;&amp; cd build\ncmake .. -DSKIP_ACE=ON -DCREATE_GUIS=ON -DENABLE_yarpcar_mjpeg=ON -DENABLE_yarpcar_depthimage=ON -DENABLE_yarpcar_depthimage2=ON\nmake -j$(nproc) # Compile\nsudo make install &amp;&amp; sudo ldconfig &amp;&amp; cd # Install and go home\n</code></pre> <p>For additional options use <code>ccmake</code> instead of <code>cmake</code>.</p> <p>To enable yarp auto-completion (do not do this for YARP 3.4+, as it has been moved to <code>data/bash-completion/yarp</code> and installed by default):</p> <pre><code>source ~/repos/yarp/scripts/yarp_completion # Activate in current bash session\necho \"source ~/repos/yarp/scripts/yarp_completion\" &gt;&gt; ~/.bashrc # Activate in future bash sessions\n</code></pre>"},{"location":"legacy/legacy-install-yarp.html#note-regarding-yarp-34","title":"Note regarding YARP 3.4+","text":"<p>YARP 3.4+ (July '20) requires a modern GCC compiler. We found that GCC 5.4/5.5 leads to compilation issues. Please follow this guide to install and use GCC 7 instead. In case you are building on top of previously generated YARP files, make sure to either delete build/CMakeCache.txt or remove the build directory entirely.</p>"},{"location":"legacy/legacy-install-yarp.html#install-yarp-ubuntu-1404-trusty","title":"Install YARP (Ubuntu 14.04 Trusty)","text":"<p>Install Dependencies that must be installed for compilation:</p> <ul> <li>CMake &gt;3.12</li> </ul> <p>Then:</p> <pre><code>sudo apt install build-essential git\nsudo apt install libeigen3-dev # Needed for creating YARP lib_math used for kinematics, etc.\nsudo apt install qtbase5-dev qtdeclarative5-dev qtmultimedia5-dev \\\n  qtdeclarative5-qtquick2-plugin qtdeclarative5-window-plugin \\\n  qtdeclarative5-qtmultimedia-plugin qtdeclarative5-controls-plugin \\\n  qtdeclarative5-dialogs-plugin libqt5svg5 # GUI stuff, Ubuntu 14.04-\nsudo apt install libjpeg8-dev # Needed for mjpeg carrier\nsudo apt install libedit-dev # Enables keyboard arrow keys within an RPC communication channel via terminal\nmkdir -p ~/repos; cd ~/repos # Create $HOME/repos if it doesn't exist; then, enter it\ngit clone --branch=yarp-3.3 https://github.com/robotology/yarp\ncd yarp &amp;&amp; mkdir build &amp;&amp; cd build\ncmake .. -DSKIP_ACE=ON -DCREATE_GUIS=ON -DENABLE_yarpcar_mjpeg=ON -DENABLE_yarpcar_depthimage=ON -DENABLE_yarpcar_depthimage=ON\nmake -j$(nproc) # Compile\nsudo make install &amp;&amp; sudo ldconfig &amp;&amp; cd # Install and go home\n</code></pre> <p>For additional options use <code>ccmake</code> instead of <code>cmake</code>.</p> <p>To enable yarp auto-completion (do not do this for YARP 3.4+, as it has been moved to <code>data/bash-completion/yarp</code> and installed by default):</p> <pre><code>source ~/repos/yarp/scripts/yarp_completion # Activate in current bash session\necho \"source ~/repos/yarp/scripts/yarp_completion\" &gt;&gt; ~/.bashrc # Activate in future bash sessions\n</code></pre>"},{"location":"legacy/legacy-install-yarp.html#note-for-linux-mint-173-rosa","title":"Note for Linux Mint 17.3 Rosa","text":"<pre><code>sudo apt install libqt5opengl5-dev # Avoid error on yarpmanager/builder GUI\n</code></pre>"},{"location":"legacy/legacy-install-yarp.html#install-additional-plugins-devices","title":"Install Additional Plugins: Devices","text":""},{"location":"legacy/legacy-install-yarp.html#install-additional-yarp-device-openni2deviceserver-ubuntu","title":"Install additional YARP device: OpenNI2DeviceServer (Ubuntu)","text":"<ul> <li>Note: tested on YARP <code>2.3.68.x</code> and YARP <code>2.3.72.1</code>, not compatible with YARP <code>3.x.*</code></li> </ul> <pre><code>cd ~/repos/yarp/build\ncmake .. -DCREATE_DEVICE_LIBRARY_MODULES=ON -DENABLE_yarpmod_OpenNI2DeviceServer=ON -DENABLE_yarpmod_OpenNI2DeviceClient=ON -DOpenNI2_INCLUDE_DIR=/usr/local/include/OpenNI2/ -DOpenNI2_LIBRARY=/usr/local/lib/libOpenNI2.so\nmake -j$(nproc) # Compile\nsudo make install &amp;&amp; sudo ldconfig &amp;&amp; cd # Install and go home\n</code></pre> <p>You should now be able to launch <code>yarpdev --device OpenNI2DeviceServer</code>. It is a complex device, see options with <code>yarpdev --device OpenNI2DeviceServer --verbose</code> (where there is an option to see modes) or example here.</p>"},{"location":"legacy/legacy-install-yarp.html#install-additional-yarp-device-openni2deviceserver-ubuntu-with-nite-skeletons","title":"Install additional YARP device: OpenNI2DeviceServer (Ubuntu) with NiTE (skeletons)","text":"<ul> <li>Note: not compatible with YARP <code>3.x.*</code></li> </ul> <p>NiTE only required for skeletons. In addition to above steps for OpenNI:</p> <ul> <li>Install NiTE2.2 (Ubuntu)</li> </ul> <pre><code>cd ~/repos/yarp/build\ncmake .. -DNITE2_INCLUDE_LOCAL=/usr/local/include/NiTE-Linux-x64-2.2 -DNITE2_LIBRARY=/usr/local/lib/libNiTE2.so\nmake -j$(nproc) # Compile\nsudo make install &amp;&amp; sudo ldconfig &amp;&amp; cd # Install and go home\n</code></pre> <p>You may need to launch <code>yarpdev --device OpenNI2DeviceServer</code> from <code>/YOUR_PATH_TO/NiTE-Linux-x64-2.2/Redist</code> if using NiTE.</p>"}]}